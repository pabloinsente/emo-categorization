forced_choice_df_DT = as.data.frame(forced_choice_df)
forced_choice_df_DT <- DropNA(forced_choice_df_DT)
forced_choice_df_DT %>% drop_na()
forced_choice_df_DT <- forced_choice_df_DT %>% drop_na()
dim(forced_choice_df_DT)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
grupo
X
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
names(X)
forced_choice_df_DT$group <- forced_choice_df_DT$label
forced_choice_df_DT$group  <- mapvalues(forced_choice_df_DT$group , from=c("happiness", "neutral","surprise","sadness", "disgust", "anger", "fear", "uncertain"), to=c(1, 2, 3, 4, 5, 6, 7, 8))
install.packages('plyr')
install.packages("plyr")
library(plyr)
forced_choice_df_DT$group  <- mapvalues(forced_choice_df_DT$group , from=c("happiness", "neutral","surprise","sadness", "disgust", "anger", "fear", "uncertain"), to=c(1, 2, 3, 4, 5, 6, 7, 8))
forced_choice_df_DT
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$group
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
df_students$emotion
library(tidyverse)
library(ordinal)
library("RColorBrewer")
library(ggeffects)
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df_students$emotion
table(df_students$emotion)
df %>% filter(row(emotion) ==  Other)
df %>% filter(row(emotion) ==  'Other')
df_students %>% filter(row(emotion) ==  'Other')
df_students[ which(df_students$emotion=='Other'), ]
df_students[ which(df_students$emotion!='Other'), ]
dim(df_students)
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
dim(df_students)
df_students[ which(df_students$emotion!='Other'), ]
dim(df_students)
dim(df_students)
table(df$emotion)
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
df <- subset(df, emotion!="Other")
table(df$emotion)
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Uncertain', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
str(df)
df <- na.omit(df)
dim(df)
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicutyF, fill = emotionF)) +
geom_bar(position = "fill") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),                    # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
ord_m2 <- clm(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
summary(ord_m2)
#######
# Get odds ratio for coefficients
exp(coef(ord_m1))
######
## sex ** NOT significant
logit = coef(ord_m1)[8]
exp(logit) # odds ratio
logit2prob(logit) # probability
plogis(logit) # probbility
logit = coef(ord_m1)[9]
exp(logit) # odds ratio
logit2prob(logit) # probability
plogis(logit) # probability
logit = coef(ord_m1)[10]
exp(logit) # odds ratio
plogis(logit)
#######
# Multicolinearity
library(stats)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
nominal_test(ord_m2)
library(tidyverse)
library(ordinal)
library("RColorBrewer")
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
table(df$emotion)
#####################################
#####################################
# prepare data for ordinal lmer
#####################################
#####################################
# filter(df, sentimentScore == "-0.4404")
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Uncertain', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
str(df)
df <- na.omit(df)
dim(df)
#####################################
#####################################
library(svglite)
two_way_sex_ethnicity <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
two_way_sex_ethnicity <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced.txt")
dev.off()
sex_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced_mturk.txt")
dev.off()
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced.txt")
dev.off()
et_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced.txt")
dev.off()
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),                    # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# to get random effects correctly
ord_m2 <- clmm(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# for nominal test
ord_m3 <- clm(
emotionF ~ sexC*ethnicityC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# for nominal test
ord_m3 <- clm(
emotionF ~ sexC*ethnicityC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
summary(ord_m2)
summary(ord_m3)
######
## sex
logit = coef(ord_m2)[8]
exp(logit) # odds ratio
plogis(logit) # probbility
logit = coef(ord_m2)[9]
exp(logit) # odds ratio
plogis(logit) # probability
logit = coef(ord_m2)[10]
exp(logit) # odds ratio
plogis(logit) # probability
#######
# Multicolinearity
library(stats)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
nominal_test(ord_m3)
library(equatiomatic)
formula_lmer <- extract_eq(ord_m3)
cat(formula_lmer, file = "lmer_output/formula_ord_lmer_summary_forced.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_ord_lmer_summary_forced.txt")
library(sjPlot)
tab_model(ord_m2, file = "lmer_output/ord_lmer_summary_forced.html")
tab_model(ord_m2, file = "../../emotions_dashboard/data/ord_lmer_summary_forced.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_sex_et_forced.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_sex_et_forced.html")
library(broom)
library(htmlTable)
nominal.test.table <- nominal_test(ord_m3) %>%
tidy() %>%
drop_na() %>%
addHtmlTableStyle(align = "r") %>%
txtRound(digits = 3) %>%
htmlTable()
nominal.test.table
cat(nominal.test.table, file = "lmer_output/nominal_test_forced.html")
cat(nominal.test.table, file = "../../emotions_dashboard/data/nominal_test_forced.html")
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/ordinal_lmer_forced_responses.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/ordinal_lmer_forced_responses - Copy.r", echo=TRUE)
two_way_sex_ethnicity
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/ordinal_lmer_forced_responses - Copy.r", echo=TRUE)
library(tidyverse)
library(ordinal)
library("RColorBrewer")
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df_mturk, emotion!="Uncertain")
table(df$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df_students, emotion!="Uncertain")
table(df$emotion)
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df_students, emotion!="Uncertain")
table(df$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
table(df$emotion)
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df_students, emotion!="Uncertain")
table(df$emotion)
df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
table(df_students$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df_students, emotion!="Uncertain")
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_students, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df, emotion!="Uncertain")
table(df$emotion)
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
str(df)
df <- na.omit(df)
dim(df)
#####################################
#####################################
library(svglite)
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
two_way_sex_ethnicity <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced.txt")
dev.off()
sex_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced.txt")
dev.off()
et_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced.txt")
dev.off()
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),                    # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# to get random effects correctly
ord_m2 <- clmm(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# for nominal test
ord_m3 <- clm(
emotionF ~ sexC*ethnicityC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
summary(ord_m2)
######
## sex
logit = coef(ord_m2)[8]
exp(logit) # odds ratio
plogis(logit) # probbility
######
## sex
logit = coef(ord_m2)[7]
exp(logit) # odds ratio
plogis(logit) # probbility
logit = coef(ord_m2)[8]
exp(logit) # odds ratio
plogis(logit) # probability
logit = coef(ord_m2)[9]
exp(logit) # odds ratio
plogis(logit) # probability
#######
# Multicolinearity
library(stats)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
nominal_test(ord_m3)
library(equatiomatic)
formula_lmer <- extract_eq(ord_m3)
cat(formula_lmer, file = "lmer_output/formula_ord_lmer_summary_forced.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_ord_lmer_summary_forced.txt")
library(sjPlot)
tab_model(ord_m2, file = "lmer_output/ord_lmer_summary_forced.html")
tab_model(ord_m2, file = "../../emotions_dashboard/data/ord_lmer_summary_forced.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_sex_et_forced.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_sex_et_forced.html")
library(broom)
library(htmlTable)
nominal.test.table <- nominal_test(ord_m3) %>%
tidy() %>%
drop_na() %>%
addHtmlTableStyle(align = "r") %>%
txtRound(digits = 3) %>%
htmlTable()
nominal.test.table
cat(nominal.test.table, file = "lmer_output/nominal_test_forced.html")
cat(nominal.test.table, file = "../../emotions_dashboard/data/nominal_test_forced.html")
library(lme4)
library(car)
library(lmerTest)
library(tidyverse)
library(ragg)
library(HLMdiag)
library(VCA)
library(hrbrthemes)
library(ggResidpanel)
library(sjPlot)
library(webshot)
library(equatiomatic)
library(svglite)
library(knitr)
library(lme4)
library(car)
library(lmerTest)
library(tidyverse)
library(ragg)
library(HLMdiag)
library(VCA)
library(hrbrthemes)
library(ggResidpanel)
library(sjPlot)
library(webshot)
library(equatiomatic)
library(svglite)
library(knitr)
df <- read_csv("../clean_data/free_labeling_emotion_uw_students_long_format_lmer.csv")
table(df$emotion)
