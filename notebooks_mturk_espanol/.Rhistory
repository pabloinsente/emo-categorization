df_mturk_esp %>%  ggplot(aes(x=sentimentScore)) +
geom_histogram(fill="#1f77b4") +
theme_ipsum()
by.sex <- df_mturk_esp %>%
ggplot( aes(x=sentimentScore, fill=sex)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#1f77b4", "#ff7f0e")) +
theme_ipsum() +
stat_bin(bins=20) +
labs(fill="")
by.sex
by.age <- df_mturk_esp %>%
ggplot( aes(x=sentimentScore, fill=age)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
stat_bin(bins=20) +
labs(fill="")
by.age
by.ethnicity <- df_mturk_esp %>%
ggplot( aes(x=sentimentScore, fill=ethnicity)) +
geom_histogram( color="#5e6162", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
stat_bin(bins=20) +
labs(fill="")
by.ethnicity
df_mturk_esp %>%
group_by(participantId) %>%
summarise_at(vars(sentimentScore), list(name = mean)) %>%
ggplot(aes(x=name)) +
geom_histogram(color="#5e6162", fill="#66a3a3") +
theme_ipsum()
df_mturk_esp %>%
group_by(photoId) %>%
summarise_at(vars(sentimentScore), list(name = mean)) %>%
ggplot(aes(x=name)) +
geom_histogram(color="#5e6162", fill="#66a3a3") +
theme_ipsum()
#####################################
#####################################
# join dataframes for lmer
#####################################
#####################################
df_students$condition <- 'english'
df_mturk_en$condition <- 'english'
df_mturk_esp$condition <- 'espanol'
# Condition centered
df_students$conditionC <- -0.5
df_mturk_en$conditionC <- -0.5
df_mturk_esp$conditionC <- 0.5
df = rbind(df_mturk_en, df_mturk_esp)
table(df$conditionC)
#####################################
#####################################
# Fit LMER
#####################################
#####################################
# # with derivatives check
# control.check=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE, optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
# m1<-lmer(
#     sentimentScore ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId) + (1 | photoId),
#     data = df,
#     control=control.check)
# summary(m1)
# # without derivatives check
# control=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE, optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
# m1<-lmer(
#     sentimentScore ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId) + (1 | photoId),
#     data = df,
#     control=control)
# summary(m1)
##
# MAXIMAL MODEL doesn't converge at all / tried multiple optimizers
##
#  with derivatives check
# control.check=lmerControl(optimizer ="Nelder_Mead", optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
# control=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE,optCtrl=list(maxfun=2e6),check.nobs.vs.nRE = "ignore")
# m2<-lmer(
#     sentimentScore ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
#     data = df,
#     control=control.check)
# summary(m2)
############### doesn't converge either
#################################
#### sex * ethnicity * condition
## without derivatives check
control=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE,optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
m2<-lmer(
sentimentScore ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data = df,
control=control)
summary(m2)
invisible(utils::memory.limit(64000))
infl <- hlm_influence(m2, level = 1)
infl
# IQR = as.numeric(format(IQR(infl$cooksd)*3, scientific = F))
CutOff = 4/nrow(infl)
print(CutOff)
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl$cooksd, name = "cooks.distance", cutoff = "internal")
dotplot_diag(infl$cooksd, name = "cooks.distance", cutoff = CutOff)
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/influence_datapoints_lmer_free_mturk_espanol.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/influence_datapoints_lmer_free_mturk_espanol.txt")
dev.off()
high_cooksd = infl[infl$cooksd > CutOff, ] %>%
arrange(desc(cooksd))
head(high_cooksd, n=10)
high_cooksd$id
infl.classes <- hlm_influence(m2, level = "participantId")
CutOffGroup = 4/49
CutOffGroup
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl.classes$cooksd, name = "cooks.distance", cutoff = "internal", modify = "dotplot")
dotplot_diag(infl.classes$cooksd, name = "cooks.distance", cutoff = CutOffGroup, modify = "dotplot")
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/influence_participants_lmer_free_mturk_espanol.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/influence_participants_lmer_free_mturk_espanol.txt")
dev.off()
high_cooksd_participants = infl.classes[infl.classes$cooksd > CutOffGroup, ] %>%
arrange(desc(cooksd))
high_cooksd_participants
CutOffLeverage = mean(infl$leverage.overall)*3
CutOffLeverage
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl$leverage.overall, name = "leverage", cutoff = "internal")
dotplot_diag(infl$leverage.overall, name = "leverage", cutoff = CutOffLeverage)
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/leverage_datapoints_lmer_free_mturk_espanol.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/leverage_datapoints_lmer_free_mturk_espanol.txt")
dev.off()
high_leverage = infl[infl$leverage.overall > CutOffLeverage, ] %>%
arrange(desc(leverage.overall))
# head(high_leverage, n=10)
high_leverage
CutOffLeverageParticipants = mean(infl.classes$leverage.overall)*3
CutOffLeverageParticipants
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl.classes$leverage.overall, name = "leverage", cutoff = "internal")
dotplot_diag(infl.classes$leverage.overall, name = "leverage", cutoff = CutOffLeverageParticipants)
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/leverage_participants_lmer_free_mturk_espanol.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/leverage_participants_lmer_free_mturk_espanol.txt")
dev.off()
high_leverage_participants = infl.classes[infl.classes$leverage.overall > CutOffLeverageParticipants, ] %>%
arrange(desc(leverage.overall))
# head(high_leverage, n=10)
high_leverage_participants
#add index column to data frame
df$id <- 1:nrow(df)
high_cooksd$id
# head(high_leverage, n=10)
high_leverage_participants
high_cooksd_participants
high_cooksd_participants$participantId
high_cooksd$id
high_cooksd_participants$participantId
high_cooksd_participants$participantId
nrow(df)
df$id
# remove datapoints
`%ni%` <- Negate(`%in%`)
df.filtered <- filter(df, id %ni% high_cooksd$id)
nrow(df.filtered)
nrow(df)
nrow(df) - nrow(df.filtered)
df$participantId
table(df$participantId)
df.filtered <- filter(df.filtered, id %ni% high_cooksd_participants$participantId)
table(df.filtered$participantId)
df.filtered <- filter(df.filtered, participantId %ni% high_cooksd_participants$participantId)
table(df.filtered$participantId)
dim(table(df$participantId))
dim(table(df$participantId)) - dim(table(df.filtered$participantId))
## without derivatives check
control <- lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE, optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
m3 <-lmer(
sentimentScore ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data = df.filtered,
control=control)
summary(m3)
### get coefficient table for reporting
tab_model(m3, file = "lmer_output/lmer_refit_summary_free_mturk_espanol.html")
tab_model(m3, file = "../../emotions_dashboard/data/lmer_refit_summary_free_mturk_espanol.html")
## Type III anova table with p-values for F-tests based on Satterthwaite's
## method:
(aov.m3 <- anova(m3))
aov.apa.m3 <- kable(aov.m3, digits = 3, format = "html", caption = "ANOVA table for refitted LMER coefficients")
aov.apa.m3 <- kable(aov.m3, digits = 3, format = "html", caption = "ANOVA table for refitted LMER coefficients")
cat(aov.apa.m3, file = "lmer_output/anova_lmer_refit_summary_free_mturk_espanol.html")
cat(aov.apa.m3, file = "../../emotions_dashboard/data/anova_lmer_refit_summary_free_mturk_espanol.html")
ggplot(df.filtered, aes(sentimentScore, fill = condition)) +
geom_histogram(binwidth = 500)
ggplot(df.filtered, aes(sentimentScore)) +
geom_histogram(binwidth = 500)
ggplot(df.filtered, aes(x=sentimentScore, fill=condition)) + geom_histogram(alpha=0.2, position="identity")
ggplot(df.filtered, aes(x=sentimentScore, fill=condition)) + geom_histogram(alpha=0.8, position="identity")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(0,200,5), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(0,200,5), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(0,2,0.1), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(x=sentimentScore, fill=condition)) + geom_histogram(alpha=0.8, position="identity")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.1), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.01), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.1), alpha=0.6,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.1), alpha=0.7,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.05), alpha=0.5,
position="identity", lwd=0.2) +
ggtitle("Normalized")
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=condition)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.05), alpha=0.5,
position="identity", lwd=0.2) +
facet_grid(. ~sex)
ggplot(df.filtered, aes(sentimentScore, fill=condition, colour=sex)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.05), alpha=0.5,
position="identity", lwd=0.2) +
facet_grid(. ~condition)
ggplot(df.filtered, aes(sentimentScore, fill=sex, colour=sex)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.05), alpha=0.5,
position="identity", lwd=0.2) +
facet_grid(. ~condition)
ggplot(df.filtered, aes(sentimentScore, fill=sex, colour=sex)) +
geom_histogram(aes(y=..density..), breaks=seq(-1,1,0.05), alpha=0.5,
position="identity", lwd=0.2) +
facet_grid(. ~ethnicity)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
condition.sum.table <- summarySE(df.filtered, measurevar="sentimentScore", groupvars=c("espanol","english"))
condition.table
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
condition.sum.table <- summarySE(df.filtered, measurevar="sentimentScore", groupvars=c("condition"))
condition.table
condition.sum.table
ggplot(condition.sum.table, aes(y=sentimentScore, x=condition, colour=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point()
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
df.filtered
sex.condition.sum.table <- summarySEwithin(df.filtered, measurevar="sentimentScore", withinvars=c("sex","condition"), idvar="participantId")
sex.condition.sum.table
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
sex.condition.sum.table <- summarySEwithin(df.filtered, measurevar="sentimentScore", withinvars=c("sex","condition"), idvar="participantId")
sex.condition.sum.table
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point()
sex.condition.sum.table
# Plot
ggplot(sex.condition.sum.table, aes(x = sex, y = sentimentScore, fill = condition)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = sentimentScore - se, ymax = sentimentScore + se),
width = 0.2,
position = position_dodge(0.9))
# Plot
ggplot(sex.condition.sum.table, aes(x = sex, y = sentimentScore, fill = condition)) +
# geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = sentimentScore - se, ymax = sentimentScore + se),
width = 0.2,
position = position_dodge(0.9))
# Plot
ggplot(sex.condition.sum.table, aes(x = sex, y = sentimentScore, fill = condition)) +
# geom_bar(stat = 'identity', position = 'dodge') +
geom_point() +
geom_errorbar(aes(ymin = sentimentScore - se, ymax = sentimentScore + se),
width = 0.2,
position = position_dodge(0.9))
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point()
# Plot
ggplot(sex.condition.sum.table, aes(x = sex, y = sentimentScore, fill = condition)) +
# geom_bar(stat = 'identity', position = 'dodge') +
geom_point(stat = 'identity') +
geom_errorbar(aes(ymin = sentimentScore - se, ymax = sentimentScore + se),
width = 0.2,
position = position_dodge(0.9))
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(stat = 'identity')
# Plot
ggplot(sex.condition.sum.table, aes(x = sex, y = sentimentScore, fill = condition)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_errorbar(aes(ymin = sentimentScore - se, ymax = sentimentScore + se),
width = 0.2,
position = position_dodge(0.9))
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(fill = "condition")
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(fill = condition)
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(color = condition)
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(color=condition)
sex.condition.sum.table
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point(color=condition)
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition, color=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_line() +
geom_point()
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=sex, y=sentimentScore, fill=condition, color=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
# geom_line() +
geom_point()
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=condition, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point()
sex.ethnicity.sum.table <- summarySEwithin(df.filtered, measurevar="sentimentScore", withinvars=c("sex","ethnicity"), idvar="participantId")
sex.ethnicity.sum.table
sex.ethnicity.sum.table
# Mean + std error of the mean
ggplot(sex.ethnicity.sum.table, aes(x=ethhnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point()
sex.ethnicity.sum.table
# Mean + std error of the mean
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point()
# Mean + std error of the mean
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point()
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex and ethnicity ")
# Mean + Standard error of the mean
ggplot(condition.sum.table, aes(y=sentimentScore, x=condition, colour=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by survey language")
# Mean + Standard error of the mean
ggplot(condition.sum.table, aes(y=sentimentScore, x=condition, colour=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by survey language")
s <- svgstring(width = 7,
height = 5)
ggplot(condition.sum.table, aes(y=sentimentScore, x=condition, colour=condition)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by survey language")
chart <- s()
cat(chart , file = "lmer_output/language_effect_free_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/language_effect_free_mturk_espanol.txt")
dev.off()
# Mean + std error of the mean
ggplot(sex.condition.sum.table, aes(x=condition, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by survey language and sex")
s <- svgstring(width = 7,
height = 5)
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by survey language and sex")
chart <- s()
cat(chart , file = "lmer_output/sex_language_effect_free_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_language_effect_free_mturk_espanol.txt")
dev.off()
# Mean + std error of the mean
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex and ethnicity ")
s <- svgstring(width = 7,
height = 5)
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex and ethnicity ")
chart <- s()
cat(chart , file = "lmer_output/sex_et_effect_free_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_et_effect_free_mturk_espanol.txt")
dev.off()
