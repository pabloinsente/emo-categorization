df_mturk = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
table(df_mturk$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_mturk, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df, emotion!="Uncertain")
table(df$emotion)
#####################################
#####################################
# prepare data for ordinal lmer
#####################################
#####################################
# filter(df, sentimentScore == "-0.4404")
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
str(df)
df <- na.omit(df)
dim(df)
#####################################
#####################################
# minimal plots
#####################################
#####################################
library(svglite)
# display.brewer.pal(n = 10, name = "RdBu")
# brewer.pal(n = 10, name = "RdBu")
#  "#67001F" "#B2182B" "#D6604D" "#F4A582" "#FDDBC7" "#D1E5F0" "#92C5DE" "#4393C3" "#2166AC" "#053061"
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
## chart for 2-way interaction SEX x ETHNICITY
two_way_sex_ethnicity <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced_mturk.txt")
dev.off()
## chart for effect of sex
sex_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced_mturk.txt")
dev.off()
## chart for effect of ethnicity
et_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced_mturk.txt")
dev.off()
library(tidyverse)
library(ordinal)
library(RColorBrewer)
library(ggforce)
library(papaja)
# df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df_mturk_en = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
df_mturk_esp = read_csv("../clean_data_mturk_espanol/forced_choice_emotion_mturk_long_format_lmer_espanol.csv")
#####################################
#####################################
# join dataframes for lmer
#####################################
#####################################
# df_students$condition <- 'english'
df_mturk_en$condition <- 'english'
df_mturk_esp$condition <- 'espanol'
table(df_mturk_en$participantId)
table(df_mturk_esp$participantId)
# add 100 to differentiate participants IDs
df_mturk_esp$participantId = df_mturk_esp$participantId+100
table(df_mturk_esp$participantId)
# language Condition centered
# df_students$conditionC <- -0.5
df_mturk_en$conditionC <- -0.5
df_mturk_esp$conditionC <- 0.5
# mturk samples comparison
df <- rbind(df_mturk_en, df_mturk_esp)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df, emotion!="Other")
df <- subset(df, emotion!="Uncertain")
table(df$emotion)
table(df$conditionC)
#####################################
#####################################
# prepare data for ordinal lmer
#####################################
#####################################
# filter(df, sentimentScore == "-0.4404")
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
df$conditionF <- as.factor(df$condition)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
table(df$conditionF)
str(df)
df <- na.omit(df)
dim(df)
head(df)
#####################################
#####################################
# minimal plots
#####################################
#####################################
library(svglite)
#
# display.brewer.pal(n = 10, name = "RdBu")
# brewer.pal(n = 10, name = "RdBu")
#  "#67001F" "#B2182B" "#D6604D" "#F4A582" "#FDDBC7" "#D1E5F0" "#92C5DE" "#4393C3" "#2166AC" "#053061"
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
## chart for 3-way interaction SEX x ETHNICITY X CONDITION
three_Way <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF~ethnicityF) +
labs(y = "proportion", x = "survey language", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
three_Way
s <- svgstring(width = 7,
height = 5)
three_Way
chart <- s()
cat(chart , file = "lmer_output/sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_et_cond_forced_mturk_espanol.txt")
dev.off()
##############################
# get charts numbers as table
comp.prop <- function(df, ethnicity, sex, condition) {
df[df$ethnicityF==ethnicity & df$sexF==sex & df$conditionF==condition,] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
}
pane.1.0 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.1 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="espanol")
pane.2.0 <- comp.prop(df, ethnicity="white", sex="female", condition="english")
pane.2.1 <- comp.prop(df, ethnicity="white", sex="female", condition="espanol")
pane.3.0 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="english")
pane.3.1 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="espanol")
pane.4.0 <- comp.prop(df, ethnicity="white", sex="male", condition="english")
pane.4.1 <- comp.prop(df, ethnicity="white", sex="male", condition="espanol")
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
bipoc.english.male <- pane.3.0$prop
bipoc.espanol.male <- pane.3.1$prop
white.english.male <- pane.4.0$prop
white.espanol.male <- pane.4.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female,
bipoc.english.male = bipoc.english.male,
bipoc.espanol.male = bipoc.espanol.male,
white.english.male = white.english.male,
white.espanol.male = white.espanol.male)
pane.table <- pane.table %>%
column_to_rownames('ID')
library(gridExtra)
library(grid)
tt1 <- ttheme_minimal()
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
library("ggplotify")
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 9,
height = 6)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
## chart for 2-way interaction SEX x CONDITION
two_way_sex_language <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~conditionF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
two_way_sex_language
s <- svgstring(width = 7,
height = 5)
two_way_sex_language
chart <- s()
cat(chart , file = "lmer_output/sex_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_cond_forced_mturk_espanol.txt")
dev.off()
## chart for 2-way interaction SEX x ETHNICITY
two_way_sex_ethnicity <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced_mturk_espanol.txt")
dev.off()
## chart for 2-way interaction  ETHNICITY X Condition
two_way_ethnicity_condition <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~conditionF) +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
two_way_ethnicity_condition
s <- svgstring(width = 7,
height = 5)
two_way_ethnicity_condition
chart <- s()
cat(chart , file = "lmer_output/ethnicity_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_cond_forced_mturk_espanol.txt")
dev.off()
## chart for effect of condition on emotion
condition_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "survey language", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
condition_chart
s <- svgstring(width = 7,
height = 5)
condition_chart
chart <- s()
cat(chart , file = "lmer_output/cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/cond_forced_mturk_espanol.txt")
dev.off()
## chart for effect of SEX on emotion
sex_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced_mturk_espanol.txt")
dev.off()
## chart for effect of ETHNICITY on emotion
et_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_apa()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced_mturk_espanol.txt")
dev.off()
library(tidyverse)
library(svglite)
library(equatiomatic)
library(ggforce)
library(papaja)
library(rstatix)
library(rjson)
df.free = read_csv("../clean_data_mturk/free_labeling_emotion_mturk_long_format_lmer.csv")
df.forced = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 848
sum(df.free$emotion == 'disgust') # 536
sum(df.free$emotion == 'fear') # 356
sum(df.free$emotion == 'happiness') # 1064
sum(df.free$emotion == 'neutral') # 181
sum(df.free$emotion == 'sadness') # 1195
sum(df.free$emotion == 'surprise') # 530
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 953
sum(df.free$emotion == 'disgust') # 576
sum(df.free$emotion == 'fear') # 384
sum(df.free$emotion == 'happiness') # 1258
sum(df.free$emotion == 'neutral') # 208
sum(df.free$emotion == 'sadness') # 1366
sum(df.free$emotion == 'surprise') # 601
dim(table(df.free$emotion)) # 847
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 0
df.free$condition.center <- -.5
head(df.free)
###################
# Comparison
###################
mean(df.forced$correct) # 0.5941317
mean(df.free$correct) # 0.2467115
##################
# join dataframes for lmer
##################
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 670
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
# save for pooling with espanol sample
write_csv(df, "../clean_data_mturk/accuracy_grouped_mturk.csv")
####################
# LMER
####################
library(lme4)
# Full model:
# - repeated measures for participantId
# - repeated measures for photId
## dummy coded predictor
m1 <- glmer(correct ~ 1 + condition.dummy + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m1)
fix.effect = -1.81
## odd ratio
exp(fix.effect) # 0.163
## probability
plogis(fix.effect) # 0.140
## centered  predictor
m2 <- glmer(correct ~ 1 + condition.center + (1 | participantIdF)  + (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
fix.effect = -1.81
## odd ratio
exp(fix.effect) # 0.163
## probability
plogis(fix.effect) # 0.140
plot_model(m1, type = "pred", terms = "condition.dummy")
###################
# plots of effects
###################
library(sjPlot)
library(ggplot2)
plot_model(m1, type = "pred", terms = "condition.dummy")
plot_model(m1, type = "eff", terms = "condition.dummy")
plot_model(m2, type = "eff", terms = "condition.dummy")
plot_model(m2, type = "eff", terms = "condition.center")
library(papaja)
survey.main <- plot_model(m2, type = "eff", terms = c("condition.center")) +
labs(x = "survey method", color="") +
theme_apa()
survey.main
s <- svgstring(width = 7,
height = 5)
survey.main
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/predicted_prob_mturk.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/predicted_prob_mturk.txt")
dev.off()
tab_model(m2)
tab_model(m2,
pred.labels = c("Intercept",
"Survey condition [.5 = forced-choice]"),
file = "../../emotions_dashboard/data/lmer_summary_odds_free_vs_forced_mturk.html")
tab_model(m2,
transform =  "plogis",
pred.labels = c("Intercept",
"Survey condition [.5 = forced-choice]"),
file = "../../emotions_dashboard/data/lmer_summary_free_vs_forced_mturk.html")
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
