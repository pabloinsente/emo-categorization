control=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE,optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
m2<-lmer(
sentimentScore ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data = df,
control=control)
summary(m2)
m2.sex <-lmer(
sentimentScore ~ 1 + sexC +  (1+ sexC*ethnicityC|participantId),
data = df,
control=control)
summary(m2.sex)
anova(m2, m2.sex)
m2.ethnicityC <-lmer(
sentimentScore ~ 1 + ethnicityC + (1+ sexC*ethnicityC |participantId),
data = df,
control=control)
summary(m2.ethnicityC)
anova(m2, m2.ethnicityC)
m2.add <-lmer(
sentimentScore ~ 1 + sexC+ethnicityC + (1+sexC*ethnicityC |participantId),
data = df,
control=control)
summary(m2.add)
anova(m2, m2.add)
full.interactive.model <- m2
sex.only.model <- m2.sex
ethnicity.only.model <- m2.ethnicityC
sex.ethnicity.additive.model <- m2.add
anova(sex.only.model, ethnicity.only.model, sex.ethnicity.additive.model, full.interactive.model)
(aov.comparison <- anova(sex.only.model, ethnicity.only.model, sex.ethnicity.additive.model, full.interactive.model))
aov.apa.com <- kable(aov.comparison, digits = 3, format = "html", caption = "ANOVA table for model comparison")
cat(aov.apa.com, file = "lmer_output/anova_comparison_lmer_summary_forced_uw_students.html")
cat(aov.apa.com, file = "../../emotions_dashboard/data/anova_comparison_lmer_summary_forced_uw_students.html")
### get mathematical formula
formula_lmer <- extract_eq(m2)
cat(formula_lmer, file = "lmer_output/formula_lmer_summary_forced_uw_students.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_lmer_summary_forced_uw_students.txt")
### get coefficient table for reporting
tab_model(m2, file = "lmer_output/lmer_summary_forced_uw_students.html")
tab_model(m2, file = "../../emotions_dashboard/data/lmer_summary_forced_uw_students.html")
(aov <- anova(m2))
aov.apa <- kable(aov, digits = 3, format = "html", caption = "ANOVA table for LMER coefficients")
cat(aov.apa, file = "lmer_output/anova_lmer_summary_forced_uw_students.html")
cat(aov.apa, file = "../../emotions_dashboard/data/anova_lmer_summary_forced_uw_students.html")
s <- svgstring()
p = ggplot(df,aes(sex,sentimentScore,color=ethnicity,group=ethnicity))+
geom_point()+
geom_smooth(method="lm",se=F)+
facet_wrap(~participantId)+
theme_bw()+
scale_color_manual(values=c("#1f77b4", "#ff7f0e"))
p
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/participants_charts_lmer_forced_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/participants_charts_lmer_forced_uw_students.txt")
dev.off()
df$Model.F.Res<- residuals(m2) #extracts the residuals and places them in a new column in our original data table
df$Abs.Model.F.Res <-abs(df$Model.F.Res) #creates a new column with the absolute value of the residuals
df$Model.F.Res2 <- df$Abs.Model.F.Res^2 #squares the absolute values of the residuals to provide the more robust estimate
Levene.Model.F <- lm(Model.F.Res2 ~ participantId, data=df) #ANOVA of the squared residuals
anova(Levene.Model.F) #displays the results
format(4.440288e-07, scientific = F)
# save to html table
aov.btw.res <- kable(anova(Levene.Model.F), digits = 3, format = "html", caption = "ANOVA table for between subjects residuals")
cat(aov.btw.res, file = "lmer_output/anova_bwt_res_summary_forced_uw_students.html")
cat(aov.btw.res, file = "../../emotions_dashboard/data/anova_bwt_res_summary_forced_uw_students.html")
s <- svgstring(width = 7,
height = 5)
Plot.Model.F <- plot(m2) #creates a fitted vs residual plot
Plot.Model.F
Plot.Model.F <- s()
cat(Plot.Model.F , file = "lmer_output/fitted_vs_residual_plot_forced_uw_students.txt")
cat(Plot.Model.F , file = "../../emotions_dashboard/data/fitted_vs_residual_plot_forced_uw_students.txt")
dev.off()
resid1 <- hlm_resid(m2, level = 1, standardize = TRUE)
s <- svgstring(width = 7,
height = 5)
ggplot(data = resid1, aes(x = participantId, y = .std.ls.resid)) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(y = "Least-Squares level-1 residuals",
title = "Least-Squares residuals by participant ID")
l1.res <- s()
cat(l1.res , file = "lmer_output/l1_res_plot_forced_uw_students.txt")
cat(l1.res , file = "../../emotions_dashboard/data/l1_res_plot_forced_uw_students.txt")
dev.off()
resid2 = hlm_resid(m2, level = "participantId", standardize = TRUE, include.ls = FALSE)
s <- svgstring(width = 7,
height = 5)
ggplot(data = resid2, aes(x = participantId, y = .std.ranef.intercept)) +
geom_point(alpha = 0.4) +
geom_smooth(method = "loess", se = FALSE) +
labs(y = "Random effects - intercept",
title = "Intercept random effects against participant ID")
l2.res.int <- s()
cat(l2.res.int , file = "lmer_output/l2_int_res_plot_forced_uw_students.txt")
cat(l2.res.int , file = "../../emotions_dashboard/data/l2_int_res_plot_forced_uw_students.txt")
dev.off()
require("lattice")
s <- svgstring(width = 7,
height = 5)
qqmath(m2, id=0.05) #id: identifies values that may be exerting undue influence on the model (i.e. outliers)
svg.qqplot <- s()
cat(svg.qqplot, file = "lmer_output/qqplot_lmer_forced_uw_students.txt")
cat(svg.qqplot, file = "../../emotions_dashboard/data/qqplot_lmer_forced_uw_students.txt")
dev.off()
infl <- hlm_influence(m2, level = 1)
# IQR = as.numeric(format(IQR(infl$cooksd)*3, scientific = F))
CutOff = 4/nrow(infl)
print(CutOff)
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl$cooksd, name = "cooks.distance", cutoff = "internal")
dotplot_diag(infl$cooksd, name = "cooks.distance", cutoff = CutOff)
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/influence_datapoints_lmer_forced_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/influence_datapoints_lmer_forced_uw_students.txt")
dev.off()
high_cooksd = infl[infl$cooksd > CutOff, ] %>%
arrange(desc(cooksd))
head(high_cooksd, n=10)
high_cooksd$id
infl.classes <- hlm_influence(m2, level = "participantId")
CutOffGroup = 4/49
CutOffGroup
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl.classes$cooksd, name = "cooks.distance", cutoff = "internal", modify = "dotplot")
dotplot_diag(infl.classes$cooksd, name = "cooks.distance", cutoff = CutOffGroup, modify = "dotplot")
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/influence_participants_lmer_forced_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/influence_participants_lmer_forced_uw_students.txt")
dev.off()
high_cooksd_participants = infl.classes[infl.classes$cooksd > CutOffGroup, ] %>%
arrange(desc(cooksd))
high_cooksd_participants
CutOffLeverage = mean(infl$leverage.overall)*3
CutOffLeverage
s <- svgstring(width = 7,
height = 5)
# dotplot_diag(infl$leverage.overall, name = "leverage", cutoff = "internal")
dotplot_diag(infl$leverage.overall, name = "leverage", cutoff = CutOffLeverage)
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/leverage_datapoints_lmer_forced_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/leverage_datapoints_lmer_forced_uw_students.txt")
dev.off()
high_leverage = infl[infl$leverage.overall > CutOffLeverage, ] %>%
arrange(desc(leverage.overall))
# head(high_leverage, n=10)
high_leverage
# high leverage data points
high_leverage$id
df = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
library(bootSVD)
library(tidyverse)
set.seed(0)
df = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df
forced_choice_df = pd.read_csv('../clean_data/forced_choice_uw_students_vectors.csv')
forced_choice_uw_students_vectors.csv
forced_choice_df = pd.read_csv('../clean_data/forced_choice_uw_students_vectors.csv')
forced_choice_df = read_csv('../clean_data/forced_choice_uw_students_vectors.csv')
forced_choice_df
myvars <- c('happiness', 'neutral', 'surprise', 'sadness', 'disgust', 'anger', 'fear', 'uncertain')
Y <- forced_choice_df[myvars]
Y
b<-bootSVD(Y, B=50, K=2, output=
c('initial_SVD', 'HD_moments', 'full_HD_PC_dist',
'HD_percentiles'), verbose=interactive())
B
b
as.matrix((Y))
Y.m <- as.matrix(Y)
b<-bootSVD(Y.m, B=50, K=2, output=
c('initial_SVD', 'HD_moments', 'full_HD_PC_dist',
'HD_percentiles'), verbose=interactive())
b
b$LD_percentiles
matplot(b$initial_SVD$V[,1:4],type='l',main='Fitted PCs',lty=1)
legend('bottomright',paste0('PC',1:4),col=1:4,lty=1,lwd=2)
matplot(b$initial_SVD$V[,1:2],type='l',main='Fitted PCs',lty=1)
legend('bottomright',paste0('PC',1:4),col=1:4,lty=1,lwd=2)
matplot(b$initial_SVD$V[,1:2],type='l',main='Fitted PCs',lty=1)
legend('bottomright',paste0('PC',1:2),col=1:2,lty=1,lwd=2)
b$HD_percentiles
b
b$initial_SVD
b$initial_SVD$V[,1:2]
b
length(b$LD_percentiles)
length(b$d_dist)
b$LD_moments$EPCs
x$LD_moments$EPCs[[2]][2]
b$LD_moments$EPCs[[2]][2]
b
b$LD_moments$
b$LD_moments
b$LD_moments$EPCs
b
b$LD_moments$\
b$LD_moments$momentCI
b
b$LD_moments$EPCs
b$LD_moments$EPCs[[k]]
b$LD_moments$EPCs[[1]]
b$LD_moments$EPCs[[1]][1]
b$LD_moments
b$LD_moments
b$LD_moments
b
fastSVD(Y)
fastSVD(Y.m)
svdY<-fastSVD(Y)
svdY<-fastSVD(Y.m)
svdY
tcrossprod(diag(svdY$d),svdY$u)
tcross <- tcrossprod(diag(svdY$d),svdY$u)
mean(tcross)
b
svdY$v
tcrossprod(diag(svdY$d[1]),svdY$u[1])
svdY
min(dim(Y.m))
svdY<-fastSVD(Y.m, nv=2
)
tcross <- tcrossprod(diag(svdY$d),svdY$u)
svdY<-fastSVD(Y.m, nv=2)
tcross <- tcrossprod(diag(svdY$d),svdY$u)
sdvY
svdY
svdY<-fastSVD(Y.m, nv=2)
sdvY
svdY
svdY<-fastSVD(Y.m)
svdY
matplot(svdY$v[,1:5],type='l',lty=1) #sample PCs for a wide matrix are the right singular vectors
Y.m
svdY$v
svdY$u
dim(svdY$u)
min(dim(Y.m))
dim(Y.m)[1]
transpose(Y.m)
t(Y.m)
Y.t <- t(Y.m)
svdY<-fastSVD(Y.t)
svdY
svdY.t <-fastSVD(Y.t)
svdY <-fastSVD(Y.m)
sdv.t
svdY.t
svdY
svdY$v
svdY.t$v
svdY.t$U
svdY.t$u
svdY.t$d
U<-svdY.t$u
V<-svdY.t$v
d<-svdY.t$d
bootSVD(Y.t, U = U, V=v, d=d, B=50, K=2, output=
c('initial_SVD', 'HD_moments', 'full_HD_PC_dist',
'HD_percentiles'), verbose=interactive())
bootSVD(Y.t, U = U, V=V, d=d, B=50, K=2, output=
c('initial_SVD', 'HD_moments', 'full_HD_PC_dist',
'HD_percentiles'), verbose=interactive())
matplot(b$initial_SVD$V[,1:2],type='l',main='Fitted PCs',lty=1)
legend('bottomright',paste0('PC',1:2),col=1:2,lty=1,lwd=2)
b<-bootSVD(Y.t, U = U, V=V, d=d, B=50, K=2, output=
c('initial_SVD', 'HD_moments', 'full_HD_PC_dist',
'HD_percentiles'), verbose=interactive())
b
b$LD_moments$momentCI
b$LD_moments$EPCs
b
b$LD_moments$EPCs[[1]]
k <- 2
# plot pointwise CIs
matplot(b$LD_moments$momentCI[[k]],type='o',col='blue',
lty=1,main=paste0('CIs For LD PC ',k),xlim=c(1,10),
xlab='PC index (truncated)',pch=1)
matlines(b$LD_percentiles[[k]],type='o',pch=1,col='darkgreen',lty=1)
abline(h=0,lty=2,col='darkgrey')
legend('topright',c('Moment CIs','Percentile CIs'),lty=1,
pch=1,col=c('blue','darkgreen'))
#plot several draws from bootstrap distribution
VsByK<-reindexMatricesByK(b$full_HD_PC_dist)
matplot(t(VsByK[[k]][1:20,]),type='l',lty=1,
main=paste0('20 Draws from bootstrap\ndistribution of HD PC ',k))
#plot pointwise CIs
matplot(b$HD_moments$momentCI[[k]],type='l',col='blue',lty=1,
main=paste0('CIs For HD PC ',k))
matlines(b$HD_percentiles[[k]],type='l',col='darkgreen',lty=1)
lines(b$initial_SVD$V[,k])
legend('topright',c('Fitted PC','Moment CIs','Percentile CIs'),
lty=1,col=c('black','blue','darkgreen'))
abline(h=0,lty=2,col='darkgrey')
#plot pointwise CIs
matplot(b$HD_moments$momentCI[[k]],type='l',col='blue',lty=1,
main=paste0('CIs For HD PC ',k))
matlines(b$HD_percentiles[[k]],type='l',col='darkgreen',lty=1)
lines(b$initial_SVD$V[,k])
legend('topright',c('Fitted PC','Moment CIs','Percentile CIs'),
lty=1,col=c('black','blue','darkgreen'))
abline(h=0,lty=2,col='darkgrey')
matplot(b$LD_moments$momentCI[[k]],type='o',col='blue',
lty=1,main=paste0('CIs For LD PC ',k),xlim=c(1,10),
xlab='PC index (truncated)',pch=1)
matlines(b$LD_percentiles[[k]],type='o',pch=1,col='darkgreen',lty=1)
abline(h=0,lty=2,col='darkgrey')
legend('topright',c('Moment CIs','Percentile CIs'),lty=1,
pch=1,col=c('blue','darkgreen'))
#plot several draws from bootstrap distribution
VsByK<-reindexMatricesByK(b$full_HD_PC_dist)
matplot(t(VsByK[[k]][1:20,]),type='l',lty=1,
main=paste0('20 Draws from bootstrap\ndistribution of HD PC ',k))
#plot pointwise CIs
matplot(b$HD_moments$momentCI[[k]],type='l',col='blue',lty=1,
main=paste0('CIs For HD PC ',k))
matlines(b$HD_percentiles[[k]],type='l',col='darkgreen',lty=1)
lines(b$initial_SVD$V[,k])
legend('topright',c('Fitted PC','Moment CIs','Percentile CIs'),
lty=1,col=c('black','blue','darkgreen'))
abline(h=0,lty=2,col='darkgrey')
# plot several draws from bootstrap distribution
AsByK<-reindexMatricesByK(b$full_LD_PC_dist)
matplot(t(AsByK[[k]][1:50,]),type='l',lty=1,
main=paste0('50 Draws from bootstrap\ndistribution of LD PC ',k),
xlim=c(1,10),xlab='PC index (truncated)')
# plot pointwise CIs
matplot(b$LD_moments$momentCI[[k]],type='o',col='blue',
lty=1,main=paste0('CIs For LD PC ',k),xlim=c(1,10),
xlab='PC index (truncated)',pch=1)
matlines(b$LD_percentiles[[k]],type='o',pch=1,col='darkgreen',lty=1)
abline(h=0,lty=2,col='darkgrey')
legend('topright',c('Moment CIs','Percentile CIs'),lty=1,
pch=1,col=c('blue','darkgreen'))
#Note: variability is mostly due to rotations with the third and fourth PC.
# Bootstrap eigenvalue distribution
dsByK<-reindexVectorsByK(b$d_dist)
boxplot(dsByK[[k]]^2,main=paste0('Covariance Matrix Eigenvalue ',k),
ylab='Bootstrap Distribution',
ylim=range(c(dsByK[[k]]^2,b$initial_SVD$d[k]^2)))
points(b$initial_SVD$d[k]^2,pch=18,col='red')
legend('bottomright','Sample Value',pch=18,col='red')
df.pca = read_csv('../clean_data/pca_2d_forced_all.csv')
df.pca
test.1=summary(aov(x_pca~label, data=df.pca))
test.2=summary(aov(y_pca~label, data=df.pca))
test.1
test.2
test.1[[1]][1,2]
ssTreat.x = test.1[[1]][1,2]
ssError.x = test.1[[1]][2,2]
dfTreat.x = test.1[[1]][1,1]
dfError.x = test.1[[1]][2,1]
ssTreat.y = test.2[[1]][1,2]
ssError.y = test.2[[1]][2,2]
dfTreat.y = test.2[[1]][1,1]
dfError.y = test.2[[1]][2,1]
# D. Add Sums of Square for overall test
sumSS.trtmnt=(ssTreat.x+ssTreat.y)/(dfTreat.x+dfTreat.y)
sumSS.error=(ssError.x+ssError.y)/(dfError.x+dfError.y)
# F-test
F.all =sumSS.trtmnt/mean.error
install.packages("remotes")
remotes::install_github("villardon/MultBiplotR")
# install.packages("remotes")
# remotes::install_github("villardon/MultBiplotR")
library(MultBiplotR)
Y
pcaboot=PCA.Bootstrap(Y.m, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
grupo=wine$Group
grupo
rownames(X)=paste(1:45, grupo, sep="-")
X=wine[,4:21]
X
rownames(X)=paste(1:45, grupo, sep="-")
rownames
rownames(X)
## Not run: X=wine[,4:21]
grupo=wine$Group
rownames(X)=paste(1:45, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
X=wine[,4:21]
grupo=wine$Group
rownames(X)=paste(1:45, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
X
grupo
df
df$emotion
forced_choice_df$emotion
forced_choice_df
forced_choice_df$label
forced_choice_df
## Not run:
X=forced_choice_df[,1:8]
X
dim(grupo)
length(grupo)
grupo=forced_choice_df$label
grupo
length(grupo)
rownames(X)=paste(1:194, grupo, sep="-")
X
type(wine)
typeof(wine)
wine
typeof(X)
typeof(forced_choice_df)
## Not run:
X=forced_choice_df[,1:8]
grupo=forced_choice_df$label
rownames(X)=paste(1:194, grupo, sep="-")
X
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
X=wine[,4:21]
grupo=wine$Group
rownames(X)=paste(1:45, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
X=wine[,4:21]
grupo=wine$Group
rownames(X)=paste(1:45, grupo, sep="-")
wine
forced_choice_df
as.data.frame(forced_choice_df)
## Not run:
forced_choice_df_DT = as.data.frame(forced_choice_df)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
getOption("max.print")
plot(pcaboot, ColorInd=as.numeric(grupo))
dim(pcaboot)
pcaboot
## Not run:
forced_choice_df_DT = as.data.frame(forced_choice_df)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
plot(pcaboot, ColorInd=as.numeric(grupo))
as.numeric(grupo)
wine$Group
as.numeric(wine$Group)
X=wine[,4:21]
grupo=wine$Group
rownames(X)=paste(1:45, grupo, sep="-")
as.numeric(grupo)
X
grupo
X=forced_choice_df_DT[,1:8]
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
grupo
forced_choice_df_DT[forced_choice_df_DT$label == "disgust",]$group = 1
forced_choice_df_DT[forced_choice_df_DT$label == "anger",]$group = 2
forced_choice_df_DT
## Not run:
forced_choice_df_DT = as.data.frame(forced_choice_df)
forced_choice_df_DT <- DropNA(forced_choice_df_DT)
forced_choice_df_DT %>% drop_na()
forced_choice_df_DT <- forced_choice_df_DT %>% drop_na()
dim(forced_choice_df_DT)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
grupo
X
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:194, grupo, sep="-")
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$label
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
names(X)
forced_choice_df_DT$group <- forced_choice_df_DT$label
forced_choice_df_DT$group  <- mapvalues(forced_choice_df_DT$group , from=c("happiness", "neutral","surprise","sadness", "disgust", "anger", "fear", "uncertain"), to=c(1, 2, 3, 4, 5, 6, 7, 8))
install.packages('plyr')
install.packages("plyr")
library(plyr)
forced_choice_df_DT$group  <- mapvalues(forced_choice_df_DT$group , from=c("happiness", "neutral","surprise","sadness", "disgust", "anger", "fear", "uncertain"), to=c(1, 2, 3, 4, 5, 6, 7, 8))
forced_choice_df_DT
X=forced_choice_df_DT[,1:8]
grupo=forced_choice_df_DT$group
rownames(X)=paste(1:192, grupo, sep="-")
pcaboot=PCA.Bootstrap(X, dimens=2, Scaling = "Standardize columns", B=1000)
plot(pcaboot, ColorInd=as.numeric(grupo))
summary(pcaboot)
