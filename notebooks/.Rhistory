}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
library(rstatix)
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey.plot
correct.survey
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "survey condition",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.plot
correct.survey
name(correct.survey)
names(correct.survey)
names(correct.survey)[4]
names(correct.survey)[4] <- "correct"
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "survey condition",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.plot
correct.label <- summarySE(df, measurevar="correct", groupvars=c("label"))
correct.label
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.label.plot
correct.label <- df %>%
group_by(label) %>%  get_summary_stats(correct, type = "mean_se")
correct.label
correct.label
names(correct.survey)[4] <- "correct"
correct.label <- df %>%
group_by(label) %>%  get_summary_stats(correct, type = "mean_se")
correct.label
names(correct.survey)[4] <- "correct"
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.label.plot
names(correct.label)[4] <- "correct"
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.label.plot
correct.survey.label <- df %>%
group_by(c("condition", "label")) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
correct.survey.label <- df %>%
group_by(condition, label) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
names(correct.survey.label)[5] <- "correct"
correct.survey.label
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.label <- df %>%
group_by(condition, label) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
names(correct.survey.label)[5] <- "correct"
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.label.plot
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
library(tidyverse)
library(svglite)
library(equatiomatic)
df.free = read_csv("../clean_data_mturk/free_labeling_emotion_mturk_long_format_lmer.csv")
df.forced = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 848
sum(df.free$emotion == 'disgust') # 536
sum(df.free$emotion == 'fear') # 356
sum(df.free$emotion == 'happiness') # 1064
sum(df.free$emotion == 'neutral') # 181
sum(df.free$emotion == 'sadness') # 1195
sum(df.free$emotion == 'surprise') # 530
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 953
sum(df.free$emotion == 'disgust') # 576
sum(df.free$emotion == 'fear') # 384
sum(df.free$emotion == 'happiness') # 1258
sum(df.free$emotion == 'neutral') # 208
sum(df.free$emotion == 'sadness') # 1366
sum(df.free$emotion == 'surprise') # 601
dim(table(df.free$emotion)) # 847
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 0
df.free$condition.center <- -.5
head(df.free)
###################
# Comparison
###################
mean(df.forced$correct) # 0.5941317
mean(df.free$correct) # 0.2467115
##################
# join dataframes for lmer
##################
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 670
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
library(rstatix)
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
names(correct.survey)[4] <- "correct"
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "survey condition",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.plot
correct.label <- df %>%
group_by(label) %>%  get_summary_stats(correct, type = "mean_se")
correct.label
names(correct.label)[4] <- "correct"
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.label.plot
correct.survey.label <- df %>%
group_by(condition, label) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
names(correct.survey.label)[5] <- "correct"
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.label.plot
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_pooled_free_forced_mturk_group_synonyms.r", echo=TRUE)
library(tidyverse)
library(plyr)
library(svglite)
library(equatiomatic)
df.free = read_csv("../clean_data_mturk_espanol/free_labeling_emotion_mturk_long_format_lmer_espanol.csv")
df.forced = read_csv("../clean_data_mturk_espanol/forced_choice_emotion_mturk_long_format_lmer_espanol.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
df.forced$label <- plyr::mapvalues(df.forced$label,
from=c("enfado", "felicidad", "asco", "tristeza", "miedo", "sorpresa", "incertidumbre"),
to=c("anger", "happiness", "disgust", 'sadness', 'fear', 'surprise', 'uncertain'))
df.free$label <- plyr::mapvalues(df.free$label,
from=c("enfado", "felicidad", "asco", "tristeza", "miedo", "sorpresa", "incertidumbre"),
to=c("anger", "happiness", "disgust", 'sadness', 'fear', 'surprise', 'uncertain'))
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 669
sum(df.free$emotion == 'disgust') # 372
sum(df.free$emotion == 'fear') # 32
sum(df.free$emotion == 'happiness') # 627
sum(df.free$emotion == 'neutral') # 146
sum(df.free$emotion == 'sadness') # 657
sum(df.free$emotion == 'surprise') # 828
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 798
sum(df.free$emotion == 'disgust') # 382
sum(df.free$emotion == 'fear') # 102
sum(df.free$emotion == 'happiness') # 861
sum(df.free$emotion == 'neutral') # 148
sum(df.free$emotion == 'sadness') # 826
sum(df.free$emotion == 'surprise') # 988
dim(table(df.free$emotion)) # 442
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 0
df.free$condition.center <- -.5
head(df.free)
###################
# Comparison
###################
mean(df.forced$correct) # 70
mean(df.free$correct) # 32
##################
# join dataframes for lmer
##################
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 504
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
library(rstatix)
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
names(correct.survey)[4] <- "correct"
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "survey condition",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.plot
correct.label <- df %>%
group_by(label) %>%  get_summary_stats(correct, type = "mean_se")
correct.label
names(correct.label)[4] <- "correct"
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))+
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.label.plot
correct.survey.label <- df %>%
group_by(condition, label) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
names(correct.survey.label)[5] <- "correct"
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))+
labs(x = "expected emotion label",
title = "Correct responses grouped by Wordnet synonyms") +
theme(plot.title = element_text(size=9))
correct.survey.label.plot
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/lmer_pooled_free_forced_mturk_espanol_group_synonyms.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_mean_diff_survey_dueling_bandits_mturk.r", echo=TRUE)
qqmath(m1, id=0.05) #id: identifies values that may be exerting undue influence on the model (i.e. outliers)
qqmath(m3, id=0.05) #id: identifies values that may be exerting undue influence on the model (i.e. outliers)
