library(ggforce)
library(papaja)
library(rstatix)
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
theme_apa()
correct.survey.plot
ggsave('accuracy-charts/correct-survey-raw.png', width = 4, height = 4)
s <- svgstring(width = 7,
height = 5)
correct.survey.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-survey_mturk_raw.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-survey_mturk_raw.txt")
dev.off()
correct.label <- df %>%
group_by(label) %>%
get_summary_stats(correct, type = "mean_se")
correct.label
names(correct.label)[4] <- "correct"
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label") +
theme_apa()
correct.label.plot
s <- svgstring(width = 7,
height = 5)
correct.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label_mturk_raw.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label_mturk_raw.txt")
dev.off()
ggsave('accuracy-charts/correct-survey-emotion-raw.png', width = 6, height = 4)
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label <- df %>%
group_by(condition, label) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey.label
names(correct.survey.label)[5] <- "correct"
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label") +
theme_apa()
correct.survey.label.plot
s <- svgstring(width = 7,
height = 5)
correct.survey.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label-survey_mturk_raw.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label-survey_mturk_raw.txt")
dev.off()
ggsave('accuracy-charts/correct-label-survey-raw.png', width = 8, height = 4)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_pooled_free_forced_mturk.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_pooled_free_forced_mturk.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/lmer_pooled_free_forced_mturk_espanol.r", echo=TRUE)
correct.survey.plot
correct.label.plot
correct.survey.label.plot
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_mean_diff_survey_dueling_bandits_mturk.r", echo=TRUE)
qqmath(m1, id=0.05) #id: identifies values that may be exerting undue influence on the model (i.e. outliers)
qqmath(m3, id=0.05) #id: identifies values that may be exerting undue influence on the model (i.e. outliers)
library(tidyverse)
library(svglite)
library(ggforce)
library(papaja)
library(rstatix)
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
library(tidyverse)
library(svglite)
library(equatiomatic)
library(ggforce)
library(papaja)
library(rstatix)
library(rjson)
df.free = read_csv("../clean_data/free_labeling_emotion_uw_students_long_format_lmer.csv")
df.forced = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 435
sum(df.free$emotion == 'disgust') # 294
sum(df.free$emotion == 'fear') # 31
sum(df.free$emotion == 'happiness') # 830
sum(df.free$emotion == 'neutral') # 16
sum(df.free$emotion == 'sadness') # 749
sum(df.free$emotion == 'surprise') # 262
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 716
sum(df.free$emotion == 'disgust') # 385
sum(df.free$emotion == 'fear') # 41
sum(df.free$emotion == 'happiness') # 1254
sum(df.free$emotion == 'neutral') # 57
sum(df.free$emotion == 'sadness') # 1027
sum(df.free$emotion == 'surprise') # 490
table(df.free$emotion)
dim(table(df.free$emotion)) # 1056
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 0
df.free$condition.center <- -.5
head(df.free)
###################
# Comparison
###################
mean(df.forced$correct)
mean(df.free$correct)
##################
# join dataframes for lmer
##################
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 627
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
correct.survey <- df %>%
group_by(condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
correct.survey.label <- df %>%
group_by(condition, label) %>%  get_summary_stats(correct, type = "mean_se")
correct.survey.label
library(tidyverse)
library(svglite)
library(ggforce)
library(papaja)
library(rstatix)
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =label , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =label , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
correct.plot <- ggplot(df, aes(x =study , y=mean.correct, fill=label)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
correct.plot <- ggplot(df, aes(x =label , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
correct.plot
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
facet_wrap(~label)
theme_apa()
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
facet_wrap(~label) +
theme_apa()
correct.plot
df
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
ggsave('accuracy-charts/pooled-studies-correct-method.png')
correct.plot
correct.plot.facet <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
facet_wrap(~label) +
theme_apa()
correct.plot.facet
ggsave('accuracy-charts/pooled-studies-correct-method-faceted.png')
source("~/.active-rstudio-document", echo=TRUE)
correct.plot.facet <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
facet_wrap(~label) +
theme_apa()
correct.plot.facet
ggsave('accuracy-charts/pooled-studies-correct-method-faceted.png',  width = 8, height = 6)
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "expected emotion label",
title = "Correct responses") +
theme_apa()
ggsave('accuracy-charts/pooled-studies-correct-method.png',  width = 5, height = 4)
correct.plot
source("/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/pooled_studies_means.r", echo=TRUE)
library(tidyverse)
library(svglite)
library(ggforce)
library(papaja)
library(rstatix)
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "survey method",
title = "Correct responses") +
theme_apa()
ggsave('accuracy-charts/pooled-studies-correct-method.png',  width = 5, height = 4)
correct.plot
correct.plot.facet <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "survey method",
title = "Correct responses") +
facet_wrap(~label) +
theme_apa()
correct.plot.facet
ggsave('accuracy-charts/pooled-studies-correct-method-faceted.png',  width = 8, height = 6)
library(tidyverse)
library(svglite)
library(ggforce)
library(papaja)
library(rstatix)
df = read_csv("../clean_data/pooled_means_categorization_emotions.csv")
df
correct.plot <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "survey method",
title = "Correct responses") +
theme_apa()
ggsave('accuracy-charts/pooled-studies-correct-method.png',  width = 5, height = 4)
correct.plot
correct.plot.facet <- ggplot(df, aes(x =method  , y=mean.correct, fill=study)) +
geom_bar(position=position_dodge(), stat="identity") +
labs(x = "survey method",
title = "Correct responses") +
facet_wrap(~label) +
theme_apa()
correct.plot.facet
ggsave('accuracy-charts/pooled-studies-correct-method-faceted.png',  width = 8, height = 6)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
## baseline count
sum(df.free$emotion == 'anger') # 435
sum(df.free$emotion == 'disgust') # 294
sum(df.free$emotion == 'fear') # 31
sum(df.free$emotion == 'happiness') # 830
sum(df.free$emotion == 'neutral') # 16
sum(df.free$emotion == 'sadness') # 749
sum(df.free$emotion == 'surprise') # 262
library(tidyverse)
library(svglite)
library(equatiomatic)
library(ggforce)
library(papaja)
library(rstatix)
library(rjson)
df.free = read_csv("../clean_data/free_labeling_emotion_uw_students_long_format_lmer.csv")
df.forced = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 435
sum(df.free$emotion == 'disgust') # 294
sum(df.free$emotion == 'fear') # 31
sum(df.free$emotion == 'happiness') # 830
sum(df.free$emotion == 'neutral') # 16
sum(df.free$emotion == 'sadness') # 749
sum(df.free$emotion == 'surprise') # 262
sum(df.free$emotion == 'anger') # 716
sum(df.free$emotion == 'disgust') # 385
sum(df.free$emotion == 'fear') # 41
sum(df.free$emotion == 'happiness') # 1254
sum(df.free$emotion == 'neutral') # 57
sum(df.free$emotion == 'sadness') # 1027
sum(df.free$emotion == 'surprise') # 490
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 716
sum(df.free$emotion == 'disgust') # 385
sum(df.free$emotion == 'fear') # 41
sum(df.free$emotion == 'happiness') # 1254
sum(df.free$emotion == 'neutral') # 57
sum(df.free$emotion == 'sadness') # 1027
sum(df.free$emotion == 'surprise') # 490
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
