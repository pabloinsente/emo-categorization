scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
exp(coef(ols1))
ord_m1))
exp(coef(ord_m1))
#######
## The odds ratio of *sentiment* being rated in category j or above (OR(Y ??? j))
exp(coef(ord_m1)[1])
scale_test(ord_m1)
#######
# Get odds ratio for coefficients
exp(coef(ord_m1))
#######
## The odds ratio of *sentiment* being rated in category j or above (OR(Y ??? j))
exp(coef(ord_m1)[1])
#######
## The odds ratio of *sentiment* being rated in category j or above (OR(Y ??? j))
exp(coef(ord_m1)[9])
exp(coef(ord_m1)[10])
exp(coef(ord_m1)[11])
head(df)
#######
# ConditionC beta = 0.0875, p-value = 0.001 -> indicates spanish-speaking participants rate pictures more positively; more likely to rate in more positive categories
summary(ord_m1)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
logit2prob(coef(ord_m1)[9])))
logit2prob(coef(ord_m1)[9]))
logit2prob(coef(ord_m1)[9]))
logit2prob(coef(ord_m1)[9])
logit = coef(ord_m1)[10]
exp(logit) # odds ratio
logit2prob(logit) # probability
logit = coef(ord_m1)[11]
exp(logit) # odds ratio
logit2prob(logit) # probability
#######
# summary significant results
summary(ord_m1)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
plogis(exp(logit))
logit2prob(logit) # probability
plogis(logit)
exp(logit) # odds ratio
logit2prob(logit) # probability
plogis(logit)
library(ggeffects)
#################
#################
# get all probabilities
ggpredictions_ord_m1 <- data.frame(ggpredict(ord_m1, terms = c("sexC", "ethnicityC", "conditionC")))
ord_m1_f <- clmm2(
emotionF ~ 1 + sexF*ethnicityF*conditionF + (1 + sexF*ethnicityF|participantId),
data=df,
Hess = TRUE)
summarise(ord_m1_f)
summary(ord_m1_f)
summary(ord_m1)
coef(ord_m1)[13]
logit = coef(ord_m1)[13]
exp(logit) # odds ratio
logit2prob(logit) # probability
plogis(logit)
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF~ethnicityF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill")
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF~conditionF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill")
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF ~ .) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~sexF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~conditionF) +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
install.packages('brant')
library(brant)
###############################
###############################
nominal_test(ord_m1)
ord_m1 <- clm(
emotionF ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
ord_m2 <- clm(
emotionF ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
summary(ord_m2)
#######
# summary significant results
summary(ord_m1)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
summary(ord_m1)
summary(ord_m2)
###############################
###############################
nominal_test(ord_m2)
anova(ord_m2, type="III")
scale_test(ord_m2)
## Fit cumulative link model:
fm <- clm(rating ~ temp + contact, data=wine)
summary(fm)
## test partial proportional odds assumption for temp and contact:
nominal_test(fm)
###############################
###############################
nominal_test(ord_m2)
scale_test(ord_m2)
#######
# Multicolinearity
df$emotion
#######
# Multicolinearity
df$sentimentScore
#######
# Multicolinearity
df$sex
#######
# Multicolinearity
as.numeric(df$sex)
typeof((df$sex))
#######
# Multicolinearity
as.numeric(df$sexF)
as.numeric(df$conditionF)
library(car)
vif(ord_m1)
vif(ord_m2)
#######
# Multicolinearity
library(stats)
df$conditionF
df$ethnicityF
df$sexF
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
M
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
chisq.test(df$sexF, df$ethnicityF,df$conditionF, correct=FALSE)
chisq.test(df$sexF, df$ethnicityF,df$conditionF)
chisq.test(df$sexF, df$ethnicityF,df$conditionF, correct=FALSE)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
#X-squared = 0.005297, df = 1, p-value = 0.942
chisq.test(df$sexF, df$conditionF, correct=FALSE)
# X-squared = 0.062296, df = 1, p-value = 0.8029
chisq.test(df$ethnicityF, df$conditionF, correct=FALSE)
nominal_test(ord_m2)
library(tidyverse)
library(ordinal)
library("RColorBrewer")
# df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df_mturk_en = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
df_mturk_esp = read_csv("../clean_data_mturk_espanol/forced_choice_emotion_mturk_long_format_lmer_espanol.csv")
#####################################
#####################################
# join dataframes for lmer
#####################################
#####################################
# df_students$condition <- 'english'
df_mturk_en$condition <- 'english'
df_mturk_esp$condition <- 'espanol'
table(df_mturk_en$participantId)
table(df_mturk_esp$participantId)
# add 100 to differentiate participants IDs
df_mturk_esp$participantId = df_mturk_esp$participantId+100
table(df_mturk_esp$participantId)
# language Condition centered
# df_students$conditionC <- -0.5
df_mturk_en$conditionC <- -0.5
df_mturk_esp$conditionC <- 0.5
# mturk samples comparison
df <- rbind(df_mturk_en, df_mturk_esp)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df, emotion!="Other")
table(df$emotion)
table(df$conditionC)
#####################################
#####################################
# prepare data for ordinal lmer
#####################################
#####################################
# filter(df, sentimentScore == "-0.4404")
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Uncertain', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
df$conditionF <- as.factor(df$condition)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
table(df$conditionF)
str(df)
df <- na.omit(df)
dim(df)
head(df)
#####################################
#####################################
# minimal plots
#####################################
#####################################
library(svglite)
#
# display.brewer.pal(n = 10, name = "RdBu")
# brewer.pal(n = 10, name = "RdBu")
#  "#67001F" "#B2182B" "#D6604D" "#F4A582" "#FDDBC7" "#D1E5F0" "#92C5DE" "#4393C3" "#2166AC" "#053061"
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
## chart for 3-way interaction SEX x ETHNICITY X CONDITION
three_Way <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF~ethnicityF) +
labs(y = "proportion", x = "survey language", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
three_Way
s <- svgstring(width = 7,
height = 5)
three_Way
chart <- s()
cat(chart , file = "lmer_output/sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_et_cond_forced_mturk_espanol.txt")
dev.off()
df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF))))
df
pg <- ggplot_build(three_Way)
pg
df.pane1 <- subset(df, ethnicityF=="bipoc" & sexF=="female")
df.pane1
df.pane1 <- subset(df, ethnicityF=="bipoc" & sexF=="female" & conditionF=="english")
df.pane1
df.pane1 %>% count(emotion)
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3))
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(.by_group=True)
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(.by_group=TRUE)
head(df)
df.pane1
df.pane1$sentimentScore
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange()
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(emotionF)
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(freq = round(cnt / sum(cnt), 3)) %>%
arrange(desc(emotionF))
df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 3)) %>%
arrange(desc(emotionF))
b.f.e <- df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 3)) %>%
arrange(desc(emotionF))
b.f.e$prop
b.f.e <- df.pane1 %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
b.f.e
sum(b.f.e$prop)
subset(df, ethnicityF=="bipoc" & conditionF=="english") %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
subset(df, ethnicityF=="bipoc" & conditionF=="english") %>%
group_by(emotionF, sexF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
pg$data
sum(b.f.e$prop)
b.f.e
comp.prop <- function(df, ethnicity, sex, condition) {
subset(df, ethnicityF==ethnicity & sexF==sex & conditionF==condition) %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
}
comp.prop(df, "bipoc", "female", "english")
b.f.e
comp.prop(df, bipoc, female, english)
subset(df, ethnicityF=="bipoc" & sexF=="female" & conditionF=="english")
comp.prop(df, ethnicityF=="bipoc", sexF=="female", conditionF=="english")
df
comp.prop(df, ethnicityF="bipoc", sexF="female", conditionF="english")
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
subset(df, ethnicityF=="bipoc" & sexF=="female" & conditionF=="english") %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
df[df$ethnicityF=='bipoc']
df[df$ethnicityF=='bipoc',]
df[df$ethnicityF=='bipoc' & df$sexF=="female" & df$conditionF=="english",]
df[df$ethnicityF=='bipoc' & df$sexF=="female" & df$conditionF=="english",] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
comp.prop <- function(df, ethnicity, sex, condition) {
df[df$ethnicityF==ethnicity & df$sexF==sex & df$conditionF==condition,] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
}
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.0 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.1 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="espanol")
pane.2.0 <- comp.prop(df, ethnicity="white", sex="female", condition="english")
pane.2.1 <- comp.prop(df, ethnicity="white", sex="female", condition="espanol")
pane.3.0 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="english")
pane.3.1 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="espanol")
pane.4.0 <- comp.prop(df, ethnicity="white", sex="male", condition="english")
pane.4.1 <- comp.prop(df, ethnicity="white", sex="male", condition="espanol")
pane.1.0
pane.1.0$emotionF
ID <- pane.1.0$emotionF
pane.table <- data.frame(ID = ID)
pane.table
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female)
pane.table
tidy(pane.table)
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
bipoc.english.male <- pane.3.0$prop
bipoc.espanol.male <- pane.3.1$prop
white.english.male <- pane.4.0$prop
white.espanol.male <- pane.4.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female,
bipoc.english.male = bipoc.english.male,
bipoc.espanol.male = bipoc.espanol.male,
white.english.male = white.english.male,
white.espanol.male = white.espanol.male)
pane.table
library("xtable")
print(xtable(pane.table), type="html", file="example.html")
library(gridExtra)
library(grid)
grid.table(pane.table)
grid.table(pane.table)
grid.table(pane.table[1:2])
grid.table(pane.table[1:2])
pane.table %>%
column_to_rownames('ID')
pane.table <- pane.table %>%
column_to_rownames('ID')
grid.table(pane.table[1:2])
tt1 <- ttheme_minimal()
grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2,
top = textGrob("Proportion of responses by subgroup (each column adds to 100)", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5)))
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2,
top = textGrob("Proportion of responses by subgroup (each column adds to 100)", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5)))
s <- svgstring(width = 7,
height = 5)
grid.tables
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
class(grid.tables)
library("ggplotify")
install.packages("ggplotify")
as.ggplot(grid.tables)
library("ggplotify")
as.ggplot(grid.tables)
as.ggplot(grid.tables)
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 7,
height = 5)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
s <- svgstring(width = 10,
height = 7)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
library("ggplotify")
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 10,
height = 7)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
s <- svgstring(width = 9,
height = 6)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/ordinal_lmer_forced_responses_mturk_espanol.r", echo=TRUE)
nominal.test.table
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/ordinal_lmer_forced_responses_mturk_espanol.r", echo=TRUE)
