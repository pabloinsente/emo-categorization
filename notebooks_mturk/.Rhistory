m2 <- glmer(correct ~ 1 + condition.center + (1 | participantIdF)  + (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
fix.effect = -1.81
## odd ratio
exp(fix.effect) # 0.163
## probability
plogis(fix.effect) # 0.140
plot_model(m1, type = "pred", terms = "condition.dummy")
###################
# plots of effects
###################
library(sjPlot)
library(ggplot2)
plot_model(m1, type = "pred", terms = "condition.dummy")
plot_model(m1, type = "eff", terms = "condition.dummy")
plot_model(m2, type = "eff", terms = "condition.dummy")
plot_model(m2, type = "eff", terms = "condition.center")
library(papaja)
survey.main <- plot_model(m2, type = "eff", terms = c("condition.center")) +
labs(x = "survey method", color="") +
theme_apa()
survey.main
s <- svgstring(width = 7,
height = 5)
survey.main
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/predicted_prob_mturk.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/predicted_prob_mturk.txt")
dev.off()
tab_model(m2)
tab_model(m2,
pred.labels = c("Intercept",
"Survey condition [.5 = forced-choice]"),
file = "../../emotions_dashboard/data/lmer_summary_odds_free_vs_forced_mturk.html")
tab_model(m2,
transform =  "plogis",
pred.labels = c("Intercept",
"Survey condition [.5 = forced-choice]"),
file = "../../emotions_dashboard/data/lmer_summary_free_vs_forced_mturk.html")
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced_group_synonyms.r", echo=TRUE)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_pooled_free_forced_mturk_group_synonyms.r", echo=TRUE)
df
library(tidyverse)
library(svglite)
library(equatiomatic)
library(ggforce)
library(papaja)
library(rstatix)
library(rjson)
df = read.csv("../clean_data_mturk/accuracy_grouped_mturk.csv")
df
head(df)
## add between subjects predictor
df$sex_participant.dummy <- ifelse(df$sex_participant == "Male", 1, 0)
df$sex_participant.center <- ifelse(df$sex_participant == "Male", .5, -.5)
table(df$sex_participant.dummy)
table(df$sex_participant.center)
correct.sex <- df %>%
group_by(sex_participant) %>%
get_summary_stats(correct, type = "mean_se")
correct.survey
correct.sex
table(df$ethnicity_participant)
## add between subjects predictor for ethnicity
df$ethnicity_participant.dummy <- ifelse(df$ethnicity_participant == "White or Caucasian", 1, 0)
df$ethnicity_participant.center <- ifelse(df$ethnicity_participant == "White or Caucasian", .5, -.5)
table(df$ethnicity_participant.dummy)
table(df$sex_participant.center)
table(df$ethnicity_participant.center)
table(df$ethnicity_participant.dummy)
table(df$ethnicity_participant.center)
correct.sex
names(correct.sex)[4] <- "correct"
correct.sex.plot <- ggplot(correct.sex, aes(x=sex_participant, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.plot
correct.et <- df %>%
group_by(ethnicity_participant) %>%
get_summary_stats(correct, type = "mean_se")
correct.et
df$ethnicity_participant.dic <- ifelse(df$ethnicity_participant == "White or Caucasian", "white", "Non-white")
correct.et <- df %>%
group_by(ethnicity_participant.dic) %>%
get_summary_stats(correct, type = "mean_se")
correct.et
names(correct.et)[4] <- "correct"
correct.et.plot <- ggplot(correct.et, aes(x=ethnicity_participant.dic, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "ethnicity participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.et.plot
#############
# by sex X ethnicity
correct.sex.et <- df %>%
group_by(sex_participant, ethnicity_participant.dic) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex.et
#############
# by sex X ethnicity
correct.sex.et <- df %>%
group_by(sex_participant, ethnicity_participant.dic) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex.et
names(correct.sex.et)[5] <- "correct"
correct.sex.et.plot <- ggplot(correct.sex.et, aes(x = reorder(sex_participant, -correct), y=correct, fill=ethnicity_participant.dic)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.et.plot
## simple effect sex
m1 <- glmer(correct ~ 1 + sex_participant.dummy + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m1)
## simple effect ethnicity
m2 <- glmer(correct ~ 1 + ethnicity_participant.dummy + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
##  main effect sex and ethnicity
m3 <- glmer(correct ~ 1 + sex_participant.center*ethnicity_participant.center + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m3)
df
head(df)
## simple effect sex
m1 <- glmer(correct ~ 1 + sex_participant.dummy*condition  + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
## simple effect sex
m1 <- glmer(correct ~ 1 + sex_participant.center*condition.center  + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m1)
## simple effect ethnicity
m2 <- glmer(correct ~ 1 + ethnicity_participant.center**condition.center + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
## simple effect ethnicity
m2 <- glmer(correct ~ 1 + ethnicity_participant.center*condition.center + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
#############
# by sex X condition
correct.sex.cond <- df %>%
group_by(sex_participant, condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex.cond
names(correct.sex.cond)[5] <- "correct"
correct.sex.cond.plot <- ggplot(correct.sex.cond, aes(x = reorder(sex_participant, -correct), y=correct, fill=ethnicity_participant.dic)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.cond.plot
correct.sex.cond.plot <- ggplot(correct.sex.cond, aes(x = reorder(sex_participant, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.cond.plot
#############
# by ethnicity X condition
correct.et.cond <- df %>%
group_by(ethnicity_participant, condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.et.cond
#############
# by ethnicity X condition
correct.et.cond <- df %>%
group_by(ethnicity_participant.dic, condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.et.cond
names(correct.et.cond)[5] <- "correct"
correct.et.cond.plot <- ggplot(correct.et.cond, aes(x = reorder(ethnicity_participant.dic, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "ethnicity participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.et.cond.plot
library(tidyverse)
library(svglite)
library(equatiomatic)
library(ggforce)
library(papaja)
library(rstatix)
library(rjson)
df.free = read_csv("../clean_data/free_labeling_emotion_uw_students_long_format_lmer.csv")
df.forced = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
syns = fromJSON(file = "../clean_data/syn_dict_emotions.json")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
df.free$emotion <- tolower(df.free$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
##########################
# Forced-choice pre-processing
##########################
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 1
df.forced$condition.center <- .5
head(df.forced)
##########################
# Free-choice pre-processing
##########################
library(plyr)
####################
# group by synonyms
## baseline count
sum(df.free$emotion == 'anger') # 435
sum(df.free$emotion == 'disgust') # 294
sum(df.free$emotion == 'fear') # 31
sum(df.free$emotion == 'happiness') # 830
sum(df.free$emotion == 'neutral') # 16
sum(df.free$emotion == 'sadness') # 749
sum(df.free$emotion == 'surprise') # 262
# anger
n = length(syns$anger)
from_words = syns$anger
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# angry
n = length(syns$angry)
from_words = syns$angry
to_word = replicate(n, 'anger')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgust
n = length(syns$disgust)
from_words = syns$disgust
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# disgusted
n = length(syns$disgusted)
from_words = syns$disgusted
to_word = replicate(n, 'disgust')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sadness
n = length(syns$sadness)
from_words = syns$sadness
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# sad
n = length(syns$sad)
from_words = syns$sad
to_word = replicate(n, 'sadness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fear
n = length(syns$fear)
from_words = syns$fear
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# fearful
n = length(syns$fearful)
from_words = syns$fearful
to_word = replicate(n, 'fear')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprise
n = length(syns$surprise)
from_words = syns$surprise
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# surprised
n = length(syns$surprised)
from_words = syns$surprised
to_word = replicate(n, 'surprise')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happiness
n = length(syns$happiness)
from_words = syns$happiness
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# happy
n = length(syns$happy)
from_words = syns$happy
to_word = replicate(n, 'happiness')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
# neutral
n = length(syns$neutral)
from_words = syns$neutral
to_word = replicate(n, 'neutral')
df.free$emotion  <- mapvalues(df.free$emotion, from=from_words, to=to_word)
sum(df.free$emotion == 'anger') # 716
sum(df.free$emotion == 'disgust') # 385
sum(df.free$emotion == 'fear') # 41
sum(df.free$emotion == 'happiness') # 1254
sum(df.free$emotion == 'neutral') # 57
sum(df.free$emotion == 'sadness') # 1027
sum(df.free$emotion == 'surprise') # 490
table(df.free$emotion)
dim(table(df.free$emotion)) # 1056
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 0
df.free$condition.center <- -.5
head(df.free)
###################
# Comparison
###################
mean(df.forced$correct)
mean(df.free$correct)
##################
# join dataframes for lmer
##################
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 627
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
# save for pooling with mturk sample
write_csv(df, "../clean_data/accuracy_grouped.csv")
df2 = read.csv("../clean_data/accuracy_grouped.csv")
head(df2)
df1 = read.csv("../clean_data_mturk/accuracy_grouped_mturk.csv")
df2 = read.csv("../clean_data/accuracy_grouped.csv")
head(df1)
head(df2)
table(df1$participantId)
table(df2$participantId)
df2$participantId <- df2$participantId + 1000
table(df1$participantId)
table(df2$participantId)
df <- rbind(df1, df2)
## add between subjects predictor for sex
df$sex_participant.dummy <- ifelse(df$sex_participant == "Male", 1, 0)
df$sex_participant.center <- ifelse(df$sex_participant == "Male", .5, -.5)
table(df$sex_participant.dummy)
table(df$sex_participant.center)
## add between subjects predictor for ethnicity
df$ethnicity_participant.dummy <- ifelse(df$ethnicity_participant == "White or Caucasian", 1, 0)
df$ethnicity_participant.center <- ifelse(df$ethnicity_participant == "White or Caucasian", .5, -.5)
table(df$ethnicity_participant.dummy)
table(df$ethnicity_participant.center)
##############
## by sex plot
correct.sex <- df %>%
group_by(sex_participant) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex
df <- df[ which(df$sex_participant!='"Non-binary / third gender"'), ]
correct.sex <- df %>%
group_by(sex_participant) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex
df <- df[ which(df$sex_participant!="Non-binary / third gender"), ]
correct.sex <- df %>%
group_by(sex_participant) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex
names(correct.sex)[4] <- "correct"
correct.sex.plot <- ggplot(correct.sex, aes(x=sex_participant, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.plot
df$ethnicity_participant.dic <- ifelse(df$ethnicity_participant == "White or Caucasian", "white", "Non-white")
correct.et <- df %>%
group_by(ethnicity_participant.dic) %>%
get_summary_stats(correct, type = "mean_se")
correct.et
names(correct.et)[4] <- "correct"
correct.et.plot <- ggplot(correct.et, aes(x=ethnicity_participant.dic, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "ethnicity participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.et.plot
#############
# by sex X condition
correct.sex.cond <- df %>%
group_by(sex_participant, condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex.cond
names(correct.sex.cond)[5] <- "correct"
correct.sex.cond.plot <- ggplot(correct.sex.cond, aes(x = reorder(sex_participant, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.cond.plot
#############
# by ethnicity X condition
correct.et.cond <- df %>%
group_by(ethnicity_participant.dic, condition) %>%
get_summary_stats(correct, type = "mean_se")
correct.et.cond
names(correct.et.cond)[5] <- "correct"
correct.et.cond.plot <- ggplot(correct.et.cond, aes(x = reorder(ethnicity_participant.dic, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "ethnicity participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.et.cond.plot
#############
# by sex X ethnicity
correct.sex.et <- df %>%
group_by(sex_participant, ethnicity_participant.dic) %>%
get_summary_stats(correct, type = "mean_se")
correct.sex.et
names(correct.sex.et)[5] <- "correct"
correct.sex.et.plot <- ggplot(correct.sex.et, aes(x = reorder(sex_participant, -correct), y=correct, fill=ethnicity_participant.dic)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "sex participant",
title = "Correct responses grouped by Wordnet synonyms") +
theme_apa()
correct.sex.et.plot
head(df)
## simple effect sex
m1 <- glmer(correct ~ 1 + sex_participant.center*condition.center  + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m1)
## simple effect ethnicity
m2 <- glmer(correct ~ 1 + ethnicity_participant.center*condition.center + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
et.survey.int <- plot_model(m2, type = "eff", terms = c("ethnicity_participant.center",
"condition.center")) +
labs(x = "survey method", color="") +
theme_apa()
et.survey.int
et.survey.int <- plot_model(m2, type = "eff", terms = c("condition.center", "ethnicity_participant.center")) +
labs(x = "survey method", color="") +
theme_apa()
et.survey.int
et.survey.int <- plot_model(m2, type = "eff", terms = c("condition.center")) +
labs(x = "survey method", color="") +
theme_apa()
et.survey.int
et.survey.int <- plot_model(m2, type = "eff", terms = c("condition.center", "ethnicity_participant.center")) +
labs(x = "survey method", color="") +
theme_apa()
et.survey.int
et.main <- plot_model(m2, type = "eff", terms = c("ethnicity_participant.center")) +
labs(x = "survey method", color="") +
theme_apa()
et.main
et.main <- plot_model(m2, type = "eff", terms = c("ethnicity_participant.center")) +
labs(x = "participant ethnicity", color="") +
theme_apa()
et.main
cond.main <- plot_model(m2, type = "eff", terms = c("condition.center")) +
labs(x = "survey method", color="") +
theme_apa()
cond.main
et.survey.int <- plot_model(m2, type = "eff", terms = c("ethnicity_participant.center",
"condition.center")) +
labs(x = "participant ethnicity", color="") +
theme_apa()
et.survey.int
correct.et.cond.plot
