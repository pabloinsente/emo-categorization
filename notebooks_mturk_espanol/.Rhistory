b.f.e
comp.prop(df, bipoc, female, english)
subset(df, ethnicityF=="bipoc" & sexF=="female" & conditionF=="english")
comp.prop(df, ethnicityF=="bipoc", sexF=="female", conditionF=="english")
df
comp.prop(df, ethnicityF="bipoc", sexF="female", conditionF="english")
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
subset(df, ethnicityF=="bipoc" & sexF=="female" & conditionF=="english") %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
df[df$ethnicityF=='bipoc']
df[df$ethnicityF=='bipoc',]
df[df$ethnicityF=='bipoc' & df$sexF=="female" & df$conditionF=="english",]
df[df$ethnicityF=='bipoc' & df$sexF=="female" & df$conditionF=="english",] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
comp.prop <- function(df, ethnicity, sex, condition) {
df[df$ethnicityF==ethnicity & df$sexF==sex & df$conditionF==condition,] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
}
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.0 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.1 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="espanol")
pane.2.0 <- comp.prop(df, ethnicity="white", sex="female", condition="english")
pane.2.1 <- comp.prop(df, ethnicity="white", sex="female", condition="espanol")
pane.3.0 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="english")
pane.3.1 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="espanol")
pane.4.0 <- comp.prop(df, ethnicity="white", sex="male", condition="english")
pane.4.1 <- comp.prop(df, ethnicity="white", sex="male", condition="espanol")
pane.1.0
pane.1.0$emotionF
ID <- pane.1.0$emotionF
pane.table <- data.frame(ID = ID)
pane.table
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female)
pane.table
tidy(pane.table)
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
bipoc.english.male <- pane.3.0$prop
bipoc.espanol.male <- pane.3.1$prop
white.english.male <- pane.4.0$prop
white.espanol.male <- pane.4.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female,
bipoc.english.male = bipoc.english.male,
bipoc.espanol.male = bipoc.espanol.male,
white.english.male = white.english.male,
white.espanol.male = white.espanol.male)
pane.table
library("xtable")
print(xtable(pane.table), type="html", file="example.html")
library(gridExtra)
library(grid)
grid.table(pane.table)
grid.table(pane.table)
grid.table(pane.table[1:2])
grid.table(pane.table[1:2])
pane.table %>%
column_to_rownames('ID')
pane.table <- pane.table %>%
column_to_rownames('ID')
grid.table(pane.table[1:2])
tt1 <- ttheme_minimal()
grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2,
top = textGrob("Proportion of responses by subgroup (each column adds to 100)", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5)))
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2,
top = textGrob("Proportion of responses by subgroup (each column adds to 100)", vjust = 1, gp = gpar(fontface = "bold", cex = 1.5)))
s <- svgstring(width = 7,
height = 5)
grid.tables
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
class(grid.tables)
library("ggplotify")
install.packages("ggplotify")
as.ggplot(grid.tables)
library("ggplotify")
as.ggplot(grid.tables)
as.ggplot(grid.tables)
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 7,
height = 5)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
s <- svgstring(width = 10,
height = 7)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
library("ggplotify")
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 10,
height = 7)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
s <- svgstring(width = 9,
height = 6)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/ordinal_lmer_forced_responses_mturk_espanol.r", echo=TRUE)
nominal.test.table
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/ordinal_lmer_forced_responses_mturk_espanol.r", echo=TRUE)
library(tidyverse)
library(ordinal)
library("RColorBrewer")
# df_students = read_csv("../clean_data/forced_choice_emotion_uw_students_long_format_lmer.csv")
df_mturk_en = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
df_mturk_esp = read_csv("../clean_data_mturk_espanol/forced_choice_emotion_mturk_long_format_lmer_espanol.csv")
# df_students$condition <- 'english'
df_mturk_en$condition <- 'english'
df_mturk_esp$condition <- 'espanol'
table(df_mturk_en$participantId)
table(df_mturk_esp$participantId)
# add 100 to differentiate participants IDs
df_mturk_esp$participantId = df_mturk_esp$participantId+100
table(df_mturk_esp$participantId)
# language Condition centered
# df_students$conditionC <- -0.5
df_mturk_en$conditionC <- -0.5
df_mturk_esp$conditionC <- 0.5
# mturk samples comparison
df <- rbind(df_mturk_en, df_mturk_esp)
table(df$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df, emotion!="Other")
df <- subset(df, emotion!="Uncertain ")
table(df$emotion)
df <- subset(df, emotion!="Uncertain")
table(df$emotion)
table(df$conditionC)
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
df$conditionF <- as.factor(df$condition)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
table(df$conditionF)
str(df)
df <- na.omit(df)
dim(df)
head(df)
library(svglite)
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
three_Way <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(sexF~ethnicityF) +
labs(y = "proportion", x = "survey language", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
three_Way
s <- svgstring(width = 7,
height = 5)
three_Way
chart <- s()
cat(chart , file = "lmer_output/sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_et_cond_forced_mturk_espanol.txt")
dev.off()
comp.prop <- function(df, ethnicity, sex, condition) {
df[df$ethnicityF==ethnicity & df$sexF==sex & df$conditionF==condition,] %>%
group_by(emotionF) %>%
summarise(cnt = n()) %>%
mutate(prop = round(cnt / sum(cnt), 2)) %>%
arrange(desc(emotionF))
}
pane.1.0 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="english")
pane.1.1 <- comp.prop(df, ethnicity="bipoc", sex="female", condition="espanol")
pane.2.0 <- comp.prop(df, ethnicity="white", sex="female", condition="english")
pane.2.1 <- comp.prop(df, ethnicity="white", sex="female", condition="espanol")
pane.3.0 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="english")
pane.3.1 <- comp.prop(df, ethnicity="bipoc", sex="male", condition="espanol")
pane.4.0 <- comp.prop(df, ethnicity="white", sex="male", condition="english")
pane.4.1 <- comp.prop(df, ethnicity="white", sex="male", condition="espanol")
ID <- pane.1.0$emotionF
bipoc.english.female <- pane.1.0$prop
bipoc.espanol.female <- pane.1.1$prop
white.english.female <- pane.2.0$prop
white.espanol.female <- pane.2.1$prop
bipoc.english.male <- pane.3.0$prop
bipoc.espanol.male <- pane.3.1$prop
white.english.male <- pane.4.0$prop
white.espanol.male <- pane.4.1$prop
pane.table <- data.frame(ID = ID,
bipoc.english.female = bipoc.english.female,
bipoc.espanol.female = bipoc.espanol.female,
white.english.female = white.english.female,
white.espanol.female = white.espanol.female,
bipoc.english.male = bipoc.english.male,
bipoc.espanol.male = bipoc.espanol.male,
white.english.male = white.english.male,
white.espanol.male = white.espanol.male)
pane.table <- pane.table %>%
column_to_rownames('ID')
library(gridExtra)
library(grid)
tt1 <- ttheme_minimal()
grid.tables <- grid.arrange(
tableGrob(pane.table[1:2], theme=tt1),
tableGrob(pane.table[3:4], theme=tt1),
tableGrob(pane.table[5:6], theme=tt1),
tableGrob(pane.table[7:8], theme=tt1),
nrow=2)
library("ggplotify")
grid.tables.plot <- as.ggplot(grid.tables)
s <- svgstring(width = 9,
height = 6)
grid.tables.plot
chart <- s()
cat(chart , file = "lmer_output/table_sex_et_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/table_sex_et_cond_forced_mturk_espanol.txt")
dev.off()
two_way_sex_language <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~conditionF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_sex_language
s <- svgstring(width = 7,
height = 5)
two_way_sex_language
chart <- s()
cat(chart , file = "lmer_output/sex_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_cond_forced_mturk_espanol.txt")
dev.off()
two_way_sex_ethnicity <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced_mturk_espanol.txt")
dev.off()
two_way_ethnicity_condition <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~conditionF) +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_ethnicity_condition
s <- svgstring(width = 7,
height = 5)
two_way_ethnicity_condition
chart <- s()
cat(chart , file = "lmer_output/ethnicity_cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_cond_forced_mturk_espanol.txt")
dev.off()
condition_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = conditionF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "survey language", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
condition_chart
s <- svgstring(width = 7,
height = 5)
condition_chart
chart <- s()
cat(chart , file = "lmer_output/cond_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/cond_forced_mturk_espanol.txt")
dev.off()
sex_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced_mturk_espanol.txt")
dev.off()
et_chart <- df %>% mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>% ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced_mturk_espanol.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced_mturk_espanol.txt")
dev.off()
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),                    # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
ord_m1 <- clmm2(
emotionF ~ sexC*ethnicityC*conditionC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# to get random effects correctly
ord_m2 <- clmm(
emotionF ~ sexC*ethnicityC*conditionC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# for nominal test
ord_m3 <- clm(
emotionF ~ sexC*ethnicityC*conditionC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
summary(ord_m2)
summary(ord_m3)
summary(ord_m2)
#######
# Get odds ratio for coefficients
exp(coef(ord_m2))
logit = coef(ord_m2)[10]
exp(logit) # odds ratio
plogis(logit) # probability
logit = coef(ord_m2)[11]
exp(logit) # odds ratio
plogis(logit)
logit = coef(ord_m2)[11]
exp(logit) # odds ratio
plogis(logit)
logit = coef(ord_m2)[10]
exp(logit) # odds ratio
plogis(logit) # probability
logit = coef(ord_m2)[12]
exp(logit) # odds ratio
plogis(logit)
logit = coef(ord_m2)[8]
exp(logit) # odds ratio
summary(ord_m2)
logit = coef(ord_m2)[6]
exp(logit) # odds ratio
logit = coef(ord_m2)[8]
exp(logit) # odds ratio
logit = coef(ord_m2)[9]
exp(logit) # odds ratio
plogis(logit)
logit = coef(ord_m2)[12]
exp(logit) # odds ratio
logit = coef(ord_m2)[11]
exp(logit) # odds ratio
plogis(logit)
#######
# Multicolinearity
library(stats)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
# X-squared = 0.005297, df = 1, p-value = 0.942
chisq.test(df$sexF, df$conditionF, correct=FALSE)
# X-squared = 0.062296, df = 1, p-value = 0.8029
chisq.test(df$ethnicityF, df$conditionF, correct=FALSE)
nominal_test(ord_m3)
library(equatiomatic)
formula_lmer <- extract_eq(ord_m3)
cat(formula_lmer, file = "lmer_output/formula_ord_lmer_summary_forced_mturk_espanol.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_ord_lmer_summary_forced_mturk_espanol.txt")
library(sjPlot)
tab_model(ord_m2, file = "lmer_output/ord_lmer_summary_forced_mturk_espanol.html")
tab_model(ord_m2, file = "../../emotions_dashboard/data/ord_lmer_summary_forced_mturk_espanol.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_sex_et_forced_mturk_espanol.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_sex_et_forced_mturk_espanol.html")
sjt.xtab(df$sexF,
df$conditionF,
var.labels = c("Sex", "Survey language"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_sex_cond_forced_mturk_espanol.html")
sjt.xtab(df$sexF,
df$conditionF,
var.labels = c("Sex", "Survey language"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_sex_cond_forced_mturk_espanol.html")
sjt.xtab(df$ethnicityF,
df$conditionF,
var.labels = c("Ethnicity", "Survey language"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_et_cond_forced_mturk_espanol.html")
sjt.xtab(df$ethnicityF,
df$conditionF,
var.labels = c("Ethnicity", "Survey language"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_et_cond_forced_mturk_espanol.html")
library(broom)
library(htmlTable)
nominal.test.table <- nominal_test(ord_m3) %>%
tidy() %>%
drop_na() %>%
addHtmlTableStyle(align = "r") %>%
txtRound(digits = 3) %>%
htmlTable()
nominal.test.table
cat(nominal.test.table, file = "lmer_output/nominal_test_forced_mturk_espanol.html")
cat(nominal.test.table, file = "../../emotions_dashboard/data/nominal_test_forced_mturk_espanol.html")
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk_espanol/ordinal_lmer_forced_responses_mturk_espanol.r", echo=TRUE)
three_Way
library(lme4)
library(car)
library(lmerTest)
library(tidyverse)
library(ragg)
library(HLMdiag)
library(VCA)
library(hrbrthemes)
library(ggResidpanel)
library(sjPlot)
library(webshot)
library(equatiomatic)
library(svglite)
library(knitr)
df_students = read_csv("../clean_data/free_labeling_emotion_uw_students_long_format_lmer.csv")
df_mturk_en = read_csv("../clean_data_mturk/free_labeling_emotion_mturk_long_format_lmer.csv")
df_mturk_esp = read_csv("../clean_data_mturk_espanol/free_labeling_emotion_mturk_long_format_lmer_espanol.csv")
df_students$condition <- 'english'
df_mturk_en$condition <- 'english'
df_mturk_esp$condition <- 'espanol'
# Condition centered
df_students$conditionC <- -0.5
df_mturk_en$conditionC <- -0.5
df_mturk_esp$conditionC <- 0.5
df = rbind(df_mturk_en, df_mturk_esp)
table(df$conditionC)
## without derivatives check
control=lmerControl(optimizer ="Nelder_Mead", calc.derivs=FALSE,optCtrl=list(maxfun=2e6), check.nobs.vs.nRE = "ignore")
m2<-lmer(
sentimentScore ~ 1 + sexC*ethnicityC*conditionC + (1 + sexC*ethnicityC|participantId),
data = df,
control=control)
summary(m2)
infl.classes <- hlm_influence(m2, level = "participantId")
