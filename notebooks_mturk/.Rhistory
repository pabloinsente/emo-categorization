## sex
logit = coef(ord_m2)[7]
exp(logit) # odds ratio
plogis(logit) # probbility
#######
# Multicolinearity
library(stats)
chisq.test(df$sexF, df$ethnicityF, correct=FALSE)
nominal_test(ord_m3)
library(tidyverse)
library(ordinal)
library("RColorBrewer")
df_mturk = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
table(df_mturk$emotion)
# drop "Other" to break tie with "Neutral" and keep ordinal variable
df <- subset(df_mturk, emotion!="Other")
# drop because = to "I don't know what the person in the picture is feeling" Not "The person is feeling uncertainty"
df <- subset(df, emotion!="Uncertain")
table(df$emotion)
df$emotionF <- factor(df$emotion,
order = TRUE,
levels =c('Disgust', 'Anger', 'Fear', 'Sadness', 'Neutral', 'Surprise', 'Happiness'))
df$participantIdF <- as.factor(df$participantId)
df$ethnicityF <- as.factor(df$ethnicity)
df$sexF <- as.factor(df$sex)
table(df$participantIdF)
table(df$ethnicityF)
table(df$sexF)
str(df)
df <- na.omit(df)
dim(df)
#####################################
#####################################
library(svglite)
RdBu8Alter <- c("#B2182B", "#D6604D", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061")
two_way_sex_ethnicity <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
facet_grid(. ~ethnicityF) +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
two_way_sex_ethnicity
s <- svgstring(width = 7,
height = 5)
two_way_sex_ethnicity
chart <- s()
cat(chart , file = "lmer_output/sex_ethnicity_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_ethnicity_forced_mturk.txt")
dev.off()
sex_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = sexF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "sex", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
sex_chart
s <- svgstring(width = 7,
height = 5)
sex_chart
chart <- s()
cat(chart , file = "lmer_output/sex_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_forced_mturk.txt")
dev.off()
et_chart <- df %>%
mutate(emotionF = ordered(emotionF, levels=rev(levels(emotionF)))) %>%
ggplot( aes(x = ethnicityF, fill = emotionF)) +
geom_bar(position = "fill") +
labs(y = "proportion", x = "ethnicity", fill ="emotion") +
scale_fill_manual(values = RdBu8Alter) +
theme_minimal()
et_chart
s <- svgstring(width = 7,
height = 5)
et_chart
chart <- s()
cat(chart , file = "lmer_output/ethnicity_forced_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/ethnicity_forced_mturk.txt")
dev.off()
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$sex),                    # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
aggregate(x = df$sentimentScore,                # Specify data column
by = list(df$ethnicity),              # Specify group indicator
FUN = mean)                           # Specify function (i.e. mean)
ord_m1 <- clmm2(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# to get random effects correctly
ord_m2 <- clmm(
emotionF ~ 1 + sexC*ethnicityC + (1 + sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
# for nominal test
ord_m3 <- clm(
emotionF ~ sexC*ethnicityC + (sexC*ethnicityC|participantId),
data=df,
Hess = TRUE)
#######
# summary significant results
summary(ord_m1)
summary(ord_m2)
######
## sex
logit = coef(ord_m2)[7]
exp(logit) # odds ratio
plogis(logit) # probbility
nominal_test(ord_m3)
library(equatiomatic)
formula_lmer <- extract_eq(ord_m3)
cat(formula_lmer, file = "lmer_output/formula_ord_lmer_summary_forced_mturk.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_ord_lmer_summary_forced_mturk.txt")
library(sjPlot)
tab_model(ord_m2, file = "lmer_output/ord_lmer_summary_forced_mturk.html")
tab_model(ord_m2, file = "../../emotions_dashboard/data/ord_lmer_summary_forced_mturk.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "lmer_output/chi_sex_et_forced_mturk.html")
sjt.xtab(df$sexF,
df$ethnicityF,
var.labels = c("Sex", "Ethnicity"),
show.exp = TRUE,
emph.total = TRUE,
file = "../../emotions_dashboard/data/chi_sex_et_forced_mturk.html")
library(broom)
library(htmlTable)
nominal.test.table <- nominal_test(ord_m3) %>%
tidy() %>%
drop_na() %>%
addHtmlTableStyle(align = "r") %>%
txtRound(digits = 3) %>%
htmlTable()
nominal.test.table
cat(nominal.test.table, file = "lmer_output/nominal_test_forced_mturk.html")
cat(nominal.test.table, file = "../../emotions_dashboard/data/nominal_test_forced_mturk.html")
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks_mturk/lmer_refactored_r_free_responses_mturk.r", echo=TRUE)
summary(m2)
summary(m3)
anova(m3
anova(m3)
anova(m3)
# remove participants
table(df$participantId)
high_cooksd_participants$participantId
# head(high_leverage, n=10)
high_leverage_participants
high_leverage_participants = infl.classes[infl.classes$leverage.overall > CutOffLeverageParticipants, ] %>%
arrange(desc(leverage.overall))
# head(high_leverage, n=10)
high_leverage_participants
high_cooksd_participants
high_cooksd$id
high_cooksd_participants$participantId
high_cooksd
high_cooksd$id
head(high_cooksd, n=10)
high_cooksd_participants
# head(high_leverage, n=10)
high_leverage
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
sex.sum.table <- summarySE(df, measurevar="sentimentScore", groupvars=c("sex"))
sex.sum.table
sex.sum.table <- summarySEwithin(df.filtered, measurevar="sentimentScore", withinvars=c("sex"), idvar="participantId")
sex.sum.table
sex.ethnicity.sum.table <- summarySEwithin(df.filtered, measurevar="sentimentScore", withinvars=c("sex","ethnicity"), idvar="participantId")
sex.ethnicity.sum.table
# Mean + Standard error of the mean
ggplot(sex.sum.table, aes(y=sentimentScore, x=sex, colour=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex")
# Mean + Standard error of the mean
ggplot(sex.sum.table, aes(y=sentimentScore, x=sex, colour=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex")
s <- svgstring(width = 7,
height = 5)
ggplot(sex.sum.table, aes(y=sentimentScore, x=sex, colour=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex")
chart <- s()
cat(chart , file = "lmer_output/sex_effect_free_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_effect_free_mturk.txt")
dev.off()
# Mean + std error of the mean
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex and ethnicity ")
s <- svgstring(width = 7,
height = 5)
ggplot(sex.ethnicity.sum.table, aes(x=ethnicity, y=sentimentScore, fill=sex, color=sex)) +
geom_errorbar(aes(ymin=sentimentScore-se, ymax=sentimentScore+se), width=.1) +
geom_point() +
labs (title= "Mean and SEM sentiment score by sex and ethnicity ")
chart <- s()
cat(chart , file = "lmer_output/sex_et_effect_free_mturk.txt")
cat(chart , file = "../../emotions_dashboard/data/sex_et_effect_free_mturk.txt")
dev.off()
library(tidyverse)
df.free = read_csv("../clean_data_mturk/free_labeling_emotion_mturk_long_format_lmer.csv")
df.forced = read_csv("../clean_data_mturk/forced_choice_emotion_mturk_long_format_lmer.csv")
## match spelling
df.forced$emotion <- tolower(df.forced$emotion)
## remove uncertain as it means "I don't know"
df.free <- subset(df.free, label!="uncertain")
df.free <- subset(df.free, emotion!="uncertain")
df.forced <- subset(df.forced, label!="uncertain")
df.forced <- subset(df.forced, emotion!="uncertain")
table(df.forced$emotion)
table(df.forced$label)
## add target
df.forced$correct <- ifelse(df.forced$emotion == df.forced$label, 1, 0)
## add between subjects predictor
df.forced$condition <- "forced"
df.forced$condition.dummy <- 0
df.forced$condition.center <- -.5
head(df.forced)
dim(table(df.free$emotion)) # 1316
table(df.free$label)
head(df.free)
## add target
df.free$correct <- ifelse(df.free$emotion == df.free$label, 1, 0)
## add between subjects predictor
df.free$condition <- "free"
df.free$condition.dummy <- 1
df.free$condition.center <- .5
head(df.free)
mean(df.forced$correct)
mean(df.free$correct)
df.free$participantId <- df.free$participantId + 100
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 627
df.forced$photoId <- gsub("\\..*","",df.forced$photoId)
df.free$photoId <- gsub("\\..*","", df.free$photoId)
dim(table(df.forced$photoId)) # 168
dim(table(df.free$photoId))  # 168
df <- rbind(df.forced, df.free)
# random variables as factors
df$participantIdF <- as.factor(df$participantId)
df$photoIdF <- as.factor(df$photoId)
library(lme4)
## dummy coded predictor
m1 <- glmer(correct ~ 1 + condition.dummy + (1 | participantIdF) +  (1 | photoIdF),
data = df,
family = binomial)
summary(m1)
fix.effect = -2.5125
## odd ratio
exp(fix.effect) # 0.029
## probability
plogis(fix.effect) # 0.0286
## centered  predictor
m2 <- glmer(correct ~ 1 + condition.center + (1 | participantIdF)  + (1 | photoIdF),
data = df,
family = binomial)
summary(m2)
fix.effect = -2.51
## odd ratio
exp(fix.effect) # 0.029
## probability
plogis(fix.effect) # 0.0286
###################
# plots of effects
###################
library(sjPlot)
library(sjlabelled)
library(sjmisc)
library(ggplot2)
plot_model(m1)
plot_model(m1, vline.color = "red")
plot_model(m1, transform = "plogis", show.values = TRUE, value.offset = .3)
plot_model(m1, show.values = TRUE, value.offset = .3)
plot_model(m1, type = "pred", terms = "condition.dummy")
plot_model(m1, type = "emm", terms = "condition.dummy")
tab_model(m1)
tab_model(m2)
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- plyr::rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
correct.survey.plot
correct.label <- summarySE(df, measurevar="correct", groupvars=c("label"))
correct.label
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.label.plot
myvars = c("correct", "condition", "label", 'participantId')
df.plot <- df[myvars]
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.survey.label.plot
