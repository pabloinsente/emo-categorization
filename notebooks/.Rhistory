position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.survey.label.plot
ggsave('accuracy-charts/correct-label-survey.png', width = 4, height = 4)
###############
# correct by survey method
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
correct.survey.plot
ggsave('accuracy-charts/correct-survey.png', width = 4, height = 4)
###############
# correct by emotion
correct.label <- summarySE(df, measurevar="correct", groupvars=c("label"))
correct.label
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.label.plot
ggsave('accuracy-charts/correct-label.png', width = 4, height = 4)
###############
# correct proportion by emotion and condition
myvars = c("correct", "condition", "label", 'participantId')
df.plot <- df[myvars]
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.survey.label.plot
ggsave('accuracy-charts/correct-label-survey.png', width = 4, height = 4)
###############
# correct by survey method
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
correct.survey.plot
ggsave('accuracy-charts/correct-survey.png', width = 4, height = 4)
###############
# correct by emotion
correct.label <- summarySE(df, measurevar="correct", groupvars=c("label"))
correct.label
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.label.plot
ggsave('accuracy-charts/correct-label.png', width = 6, height = 4)
###############
# correct proportion by emotion and condition
myvars = c("correct", "condition", "label", 'participantId')
df.plot <- df[myvars]
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.survey.label.plot
ggsave('accuracy-charts/correct-label-survey.png', width = 8, height = 4)
source("//wsl$/Ubuntu-20.04/home/pablo_ubuntu/emo-categorization/notebooks/lmer_pooled_free_forced.r", echo=TRUE)
plot_model(m1)
plot_model(m1, vline.color = "red")
plot_model(m1, transform = "plogis", show.values = TRUE, value.offset = .3)
plot_model(m1, show.values = TRUE, value.offset = .3)
plot_model(m1, type = "pred", terms = "condition.dummy")
tab_model(m1,  type = "pred")
tab_model(m2)
### get coefficient table for reporting
tab_model(m1, file = "lmer_output/lmer_summary_free_vs_forced_uw_students.html")
tab_model(m1, file = "../../emotions_dashboard/data/lmer_summary_free_vs_forced_uw_students.html")
correct.survey.plot
s <- svgstring()
correct.survey.plot
library(svglite)
correct.survey.plot
s <- svgstring()
correct.survey.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-survey_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-survey_uw_students.txt")
dev.off()
correct.label.plot
s <- svgstring()
correct.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label_uw_students.txt")
dev.off()
correct.survey.label.plot
s <- svgstring()
correct.survey.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label-survey_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label-survey_uw_students.txt")
dev.off()
###############
# correct by survey method
correct.survey <- summarySE(df, measurevar="correct", groupvars=c("condition"))
correct.survey.plot <- ggplot(correct.survey, aes(x=condition, y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))
correct.survey.plot
s <- svgstring(width = 7,
height = 5)
correct.survey.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-survey_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-survey_uw_students.txt")
dev.off()
ggsave('accuracy-charts/correct-survey.png', width = 4, height = 4)
###############
# correct by emotion
correct.label <- summarySE(df, measurevar="correct", groupvars=c("label"))
correct.label
correct.label.plot <- ggplot(correct.label, aes(x = reorder(label, -correct), y=correct)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.label.plot
s <- svgstring(width = 7,
height = 5)
correct.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label_uw_students.txt")
dev.off()
ggsave('accuracy-charts/correct-label.png', width = 6, height = 4)
###############
# correct proportion by emotion and condition
myvars = c("correct", "condition", "label", 'participantId')
df.plot <- df[myvars]
correct.survey.label <-  summarySEwithin(df, measurevar="correct",
betweenvars="condition",
withinvars=c("label"),
idvar="participantId")
correct.survey.label.plot <- ggplot(correct.survey.label, aes(x = reorder(label, -correct), y=correct, fill=condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=correct-se, ymax=correct+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9)) +
labs(x = "expected emotion label")
correct.survey.label.plot
s <- svgstring(width = 7,
height = 5)
correct.survey.label.plot
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/correct-label-survey_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/correct-label-survey_uw_students.txt")
dev.off()
ggsave('accuracy-charts/correct-label-survey.png', width = 8, height = 4)
# ####################################
# # LMER adding ethnicity as covariate
# ####################################
#
# ## dummy coded predictor
# m3 <- glmer(correct ~ 1 + condition.center * ethnicityC + (1 + ethnicityC| participantIdF) +(1 | photoIdF),
#             data = df,
#             family = binomial)
#
# summary(m3)
#
# fix.effect = -3.376
# ## odd ratio
# exp(fix.effect) # 0.03415317
# ## probability
# plogis(fix.effect) # 0.03302525
#
#
# #################
# ## interpretation
#
# # participants in the free-response format are expected to have b=-3.37626 lower log odds of "correctly"
# # answering the expected emotion label, p < 0.001, holding constant the random-effects
# # for participantId and photoId, and fixed-effect for ethnicity
# #
# # Or, the probability of correctly answering in the free-response condition is only 3%, holding
# # constant the random-effects for participantId and photoId, and fixed-effect for ethnicity
#
# plot_model(m3, show.values = TRUE, value.offset = .3)
# plot_model(m3, type = "pred", terms = c("condition.center", "ethnicityC"))
#
#
# ####################################
# # LMER adding sex as covariate
# ####################################
#
# ## dummy coded predictor
# m4 <- glmer(correct ~ 1 + condition.center * sexC + (1 + sexC| participantIdF) +(1 | photoIdF),
#             data = df,
#             family = binomial)
#
# summary(m4)
#
# fix.effect = -3.378
# ## odd ratio
# exp(fix.effect) # 0.0341
# ## probability
# plogis(fix.effect) # 0.0330
#
#
# #################
# ## interpretation
#
# # participants in the free-response format are expected to have b=-3.3782 lower log odds of "correctly"
# # answering the expected emotion label, p < 0.001, holding constant the random-effects
# # for participantId and photoId, and fixed-effect for sex
# #
# # Or, the probability of correctly answering in the free-response condition is only 3%, holding
# # constant the random-effects for participantId and photoId, and fixed-effect for sex
#
# plot_model(m4, show.values = TRUE, value.offset = .3)
# plot_model(m4, type = "pred", terms = c("condition.center", "sexC"))
#
#
#
#
plot_model(m1, type = "pred", terms = "condition.dummy")
tab_model(m1, transform = prob)
prob <- function(p) {exp(coef(p)) / (1 + exp(coef((p)))}
tab_model(m1, transform = plogis)
plogis
tab_model(m1, transform = plogis)
prob <- function(p) {exp(coef(p)) / (1 + exp(coef((p))))}
tab_model(m1, transform = prob)
s <- svgstring(width = 7,
height = 5)
plot_model(m1, type = "pred", terms = "condition.dummy")
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/predicted_prob_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/predicted_prob_uw_students.txt")
dev.off()
plot_model(m1, type = "pred", terms = "condition.dummy")
plot_model(m1, type = "emm", terms = "condition.dummy")
plot_model(m1, transform = "plogis", show.values = TRUE, value.offset = .3)
plot_model(m1, show.values = TRUE, value.offset = .3)
tab_model(m1,transform =  "plogis")
### get coefficient table for reporting
tab_model(m1, transform =  "plogis", file = "lmer_output/lmer_summary_free_vs_forced_uw_students.html")
tab_model(m1, transform =  "plogis", file = "../../emotions_dashboard/data/lmer_summary_free_vs_forced_uw_students.html")
s <- svgstring(width = 7,
height = 5)
plot_model(m1, type = "pred", terms = "condition.dummy")
svg.string.plot <- s()
cat(svg.string.plot, file = "lmer_output/predicted_prob_uw_students.txt")
cat(svg.string.plot, file = "../../emotions_dashboard/data/predicted_prob_uw_students.txt")
dev.off()
tab_model(m1)
tab_model(m1,transform =  "plogis")
### get coefficient table for reporting
tab_model(m1, transform =  "plogis", file = "lmer_output/lmer_summary_free_vs_forced_uw_students.html")
tab_model(m1, transform =  "plogis", file = "../../emotions_dashboard/data/lmer_summary_free_vs_forced_uw_students.html")
library(equatiomatic)
### get mathematical formula
formula_lmer <- extract_eq(m1)
cat(formula_lmer, file = "lmer_output/formula_log_lmer_uw_students.txt")
cat(formula_lmer, file = "../../emotions_dashboard/data/formula_log_lmer_uw_students.txt")
# read students ranking
df.anger.rank = read_csv('../clean_data/free_choice_emotion_uw_students_anger_rank.csv')
df.disgust.rank = read_csv('../clean_data/free_choice_emotion_uw_students_disgust_rank.csv')
library(tidyverse)
# read students ranking
df.anger.rank = read_csv('../clean_data/free_choice_emotion_uw_students_anger_rank.csv')
df.disgust.rank = read_csv('../clean_data/free_choice_emotion_uw_students_disgust_rank.csv')
df.fear.rank = read_csv('../clean_data/free_choice_emotion_uw_students_fear_rank.csv')
df.happiness.rank = read_csv('../clean_data/free_choice_emotion_uw_students_happiness_rank.csv')
df.sadness.rank = read_csv('../clean_data/free_choice_emotion_uw_students_sadness_rank.csv')
df.surprise.rank = read_csv('../clean_data/free_choice_emotion_uw_students_surprise_rank.csv')
head(df.anger.rank)
head(df.anger.rank)[1,:]
df.anger.rank[1,:]
df.anger.rank[1:2,:]
df.anger.rank[1:2,]
df.anger.rank[1,]
df.disgust.rank[1,]
# read students ranking
df.rank = read_csv('../data/emotion_top_word_survey_dueling_bandits.csv')
# read frequency in the web rankig
unigram.freq= read_csv('../data/unigram_freq.csv')
head(df.rank)
source("~/.active-rstudio-document", echo=TRUE)
head(unigram.freq)
head(df.rank)
head(unigram.freq)
df1 = merge(x = df.rank,
y = unigram.freq,
by.x="survey.top.word",
by.y="word",
all.x = TRUE)
df1
names(df1)[3]
names(df1)[7]
names(df1)[7]  <- 'web.freq.survey'
df1
source("~/.active-rstudio-document", echo=TRUE)
head(df.rank)
df1 = merge(x = df1,
y = unigram.freq,
by.x="dueling.bandits.top.word",
by.y="word")
source("~/.active-rstudio-document", echo=TRUE)
head(df)
source("~/.active-rstudio-document", echo=TRUE)
head(df2) %>% sort()
sort(df2)
# sort by photID
df2 <- df2[order(photoID),]
df2
source("~/.active-rstudio-document", echo=TRUE)
df2
# sort by photID
df2 <- df2[order(photoID     ),]
# sort by photID
df2 <- df2[order(df2$photoID),]
df2
mean(df2$web.freq.dueling.bandits)
mean(df2$web.freq.survey)
########################
# rank.web ~ rank.survey
ggplot(df2, aes(x=web.freq.survey, y=web.freq.dueling.bandits)) +
geom_point() +
geom_smooth() +
ZXZX
########################
# rank.web ~ rank.survey
ggplot(df2, aes(x=web.freq.survey, y=web.freq.dueling.bandits)) +
geom_point() +
geom_smooth()
library(tidyverse)
library(ggpubr)
library(rstatix)
# read students ranking
df.rank = read_csv('../data/emotion_top_word_survey_dueling_bandits.csv')
# read frequency in the web rankig
unigram.freq= read_csv('../data/unigram_freq.csv')
head(df.rank)
head(unigram.freq)
df0 = merge(x = df.rank,
y = unigram.freq,
by.x="word",
by.y="word")
df0
names(df0)[7]
names(df0)[7]  <- 'web.frequency'
df = merge(x = df.rank,
y = unigram.freq,
by.x="word",
by.y="word")
names(df)[7]  <- 'web.frequency'
head(df)
df %>% identify_outliers(web.frequency)
## Check normality assumption
df %>% shapiro_test(web.frequency)
## check outliers
outliers<- df %>% identify_outliers(web.frequency)
outliers
df[ !df2$word %in% outliers$word ,]
df[ !df$word %in% outliers$word ,]
dim(df[!df$word %in% outliers$word ,])
dim(df)
## Check normality assumption
df2 %>% shapiro_test(web.frequency)
df2
# filter out outliers
df2 <- dim(df[!df$word %in% outliers$word ,])
## Check normality assumption
df2 %>% shapiro_test(web.frequency)
df2
# filter out outliers
df2 <- df[!df$word %in% outliers$word ,]
## Check normality assumption
df2 %>% shapiro_test(web.frequency)
ggqqplot(df2, x = "web.frequency")
df2
p <- df2 %>%
ggplot( aes(x=web.frequency, fill=method)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p <- df2 %>%
ggplot( aes(x=web.frequency, fill=method)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p
boxplot(df2$web.frequency ~ df2$method)
df2 %>%
group_by(method) %>%
get_summary_stats(web.frequency, type = "mean_sd")
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot()
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot() +
geom_dotplot()
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot()
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot() +
geom_point()
stat.test <- df2  %>%
t_test(web.frequency ~ method, paired = TRUE) %>%
add_significance()
outliers # funny, well
df
outliers # funny, well
subset(df, photoID != 14 & photoID != 16)
df2 < - subset(df, photoID != 14 & photoID != 16)
df2 <- subset(df, photoID != 14 & photoID != 16)
dim(df2)
## Check normality assumption
df2 %>% shapiro_test(web.frequency)
ggqqplot(df2, x = "web.frequency")
df2 %>%
group_by(method) %>%
get_summary_stats(web.frequency, type = "mean_sd")
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot() +
geom_point()
stat.test <- df2  %>%
t_test(web.frequency ~ method, paired = TRUE) %>%
add_significance()
stat.test
# read students ranking
df.rank = read_csv('../data/emotion_top_word_survey_dueling_bandits.csv')
# read frequency in the web rankig
unigram.freq= read_csv('../data/unigram_freq.csv')
head(df.rank)
head(unigram.freq)
df = merge(x = df.rank,
y = unigram.freq,
by.x="word",
by.y="word")
names(df)[7]  <- 'web.frequency'
head(df)
# read students ranking
df.rank = read_csv('../data/emotion_top_2_word_survey_dueling_bandits.csv')
# read frequency in the web rankig
unigram.freq= read_csv('../data/unigram_freq.csv')
head(df.rank)
head(unigram.freq)
df = merge(x = df.rank,
y = unigram.freq,
by.x="word",
by.y="word")
names(df)[7]  <- 'web.frequency'
head(df)
## check outliers
outliers <- df %>% identify_outliers(web.frequency)
outliers # funny, well
# filter out outliers
df2 <- subset(df, photoID != 4 & photoID != 13 & photoID != 14  & photoID != 15 & photoID != 16)
## Check normality assumption
df2 %>% shapiro_test(web.frequency)
ggqqplot(df2, x = "web.frequency")
df2 %>%
group_by(method) %>%
get_summary_stats(web.frequency, type = "mean_sd")
# grouped boxplot
ggplot(df2, aes(x = method, y = web.frequency)) +
geom_boxplot() +
geom_point()
stat.test <- df2  %>%
t_test(web.frequency ~ method, paired = TRUE) %>%
add_significance()
stat.test
res.aov <- anova_test(data = df2, dv = web.frequency, wid = photoID, within = method)
res.aov <- anova_test(data = df2, dv = web.frequency, within = method)
df2$unqid <- 1:nrow(df2)
res.aov <- anova_test(data = df2, dv = web.frequency, wid = unqid, within = method)
get_anova_table(res.aov)
df2
res.aov <- anova_test(data = df2, dv = web.frequency, wid = unqid, within = method)
apply(df2, 2, function(x) any(is.na(x)))
library(lme4)
m1<-lmer(
web.frequency ~ 1 + method + (1 + |photoID),
data = df2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(car)
Anova(m1, type = III)
Anova(m1, type = "III")
